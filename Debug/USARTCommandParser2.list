
USARTCommandParser2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003904  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08003afc  08003afc  00004afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b8c  08003b8c  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003b8c  08003b8c  00004b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b94  08003b94  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b94  08003b94  00004b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b98  08003b98  00004b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003b9c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  08003ba8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08003ba8  000050cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a118  00000000  00000000  0000503a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000186b  00000000  00000000  0000f152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000760  00000000  00000000  000109c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005a9  00000000  00000000  00011120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025e81  00000000  00000000  000116c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f84  00000000  00000000  0003754a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed57c  00000000  00000000  000414ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012ea4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d58  00000000  00000000  0012ea90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  001307e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003ae4 	.word	0x08003ae4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08003ae4 	.word	0x08003ae4

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b988 	b.w	8000560 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	468e      	mov	lr, r1
 8000270:	4604      	mov	r4, r0
 8000272:	4688      	mov	r8, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d962      	bls.n	8000344 <__udivmoddi4+0xdc>
 800027e:	fab2 f682 	clz	r6, r2
 8000282:	b14e      	cbz	r6, 8000298 <__udivmoddi4+0x30>
 8000284:	f1c6 0320 	rsb	r3, r6, #32
 8000288:	fa01 f806 	lsl.w	r8, r1, r6
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	40b7      	lsls	r7, r6
 8000292:	ea43 0808 	orr.w	r8, r3, r8
 8000296:	40b4      	lsls	r4, r6
 8000298:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800029c:	fa1f fc87 	uxth.w	ip, r7
 80002a0:	fbb8 f1fe 	udiv	r1, r8, lr
 80002a4:	0c23      	lsrs	r3, r4, #16
 80002a6:	fb0e 8811 	mls	r8, lr, r1, r8
 80002aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ae:	fb01 f20c 	mul.w	r2, r1, ip
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002bc:	f080 80ea 	bcs.w	8000494 <__udivmoddi4+0x22c>
 80002c0:	429a      	cmp	r2, r3
 80002c2:	f240 80e7 	bls.w	8000494 <__udivmoddi4+0x22c>
 80002c6:	3902      	subs	r1, #2
 80002c8:	443b      	add	r3, r7
 80002ca:	1a9a      	subs	r2, r3, r2
 80002cc:	b2a3      	uxth	r3, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002da:	fb00 fc0c 	mul.w	ip, r0, ip
 80002de:	459c      	cmp	ip, r3
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0x8e>
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e8:	f080 80d6 	bcs.w	8000498 <__udivmoddi4+0x230>
 80002ec:	459c      	cmp	ip, r3
 80002ee:	f240 80d3 	bls.w	8000498 <__udivmoddi4+0x230>
 80002f2:	443b      	add	r3, r7
 80002f4:	3802      	subs	r0, #2
 80002f6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fa:	eba3 030c 	sub.w	r3, r3, ip
 80002fe:	2100      	movs	r1, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa2>
 8000302:	40f3      	lsrs	r3, r6
 8000304:	2200      	movs	r2, #0
 8000306:	e9c5 3200 	strd	r3, r2, [r5]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d905      	bls.n	800031e <__udivmoddi4+0xb6>
 8000312:	b10d      	cbz	r5, 8000318 <__udivmoddi4+0xb0>
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	2100      	movs	r1, #0
 800031a:	4608      	mov	r0, r1
 800031c:	e7f5      	b.n	800030a <__udivmoddi4+0xa2>
 800031e:	fab3 f183 	clz	r1, r3
 8000322:	2900      	cmp	r1, #0
 8000324:	d146      	bne.n	80003b4 <__udivmoddi4+0x14c>
 8000326:	4573      	cmp	r3, lr
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xc8>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 8105 	bhi.w	800053a <__udivmoddi4+0x2d2>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb6e 0203 	sbc.w	r2, lr, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4690      	mov	r8, r2
 800033a:	2d00      	cmp	r5, #0
 800033c:	d0e5      	beq.n	800030a <__udivmoddi4+0xa2>
 800033e:	e9c5 4800 	strd	r4, r8, [r5]
 8000342:	e7e2      	b.n	800030a <__udivmoddi4+0xa2>
 8000344:	2a00      	cmp	r2, #0
 8000346:	f000 8090 	beq.w	800046a <__udivmoddi4+0x202>
 800034a:	fab2 f682 	clz	r6, r2
 800034e:	2e00      	cmp	r6, #0
 8000350:	f040 80a4 	bne.w	800049c <__udivmoddi4+0x234>
 8000354:	1a8a      	subs	r2, r1, r2
 8000356:	0c03      	lsrs	r3, r0, #16
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	b280      	uxth	r0, r0
 800035e:	b2bc      	uxth	r4, r7
 8000360:	2101      	movs	r1, #1
 8000362:	fbb2 fcfe 	udiv	ip, r2, lr
 8000366:	fb0e 221c 	mls	r2, lr, ip, r2
 800036a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800036e:	fb04 f20c 	mul.w	r2, r4, ip
 8000372:	429a      	cmp	r2, r3
 8000374:	d907      	bls.n	8000386 <__udivmoddi4+0x11e>
 8000376:	18fb      	adds	r3, r7, r3
 8000378:	f10c 38ff 	add.w	r8, ip, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x11c>
 800037e:	429a      	cmp	r2, r3
 8000380:	f200 80e0 	bhi.w	8000544 <__udivmoddi4+0x2dc>
 8000384:	46c4      	mov	ip, r8
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	fbb3 f2fe 	udiv	r2, r3, lr
 800038c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000390:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000394:	fb02 f404 	mul.w	r4, r2, r4
 8000398:	429c      	cmp	r4, r3
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x144>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f102 30ff 	add.w	r0, r2, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x142>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f200 80ca 	bhi.w	800053e <__udivmoddi4+0x2d6>
 80003aa:	4602      	mov	r2, r0
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0x98>
 80003b4:	f1c1 0620 	rsb	r6, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 f706 	lsr.w	r7, r2, r6
 80003be:	431f      	orrs	r7, r3
 80003c0:	fa0e f401 	lsl.w	r4, lr, r1
 80003c4:	fa20 f306 	lsr.w	r3, r0, r6
 80003c8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003cc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d0:	4323      	orrs	r3, r4
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	fa1f fc87 	uxth.w	ip, r7
 80003da:	fbbe f0f9 	udiv	r0, lr, r9
 80003de:	0c1c      	lsrs	r4, r3, #16
 80003e0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003e4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003ec:	45a6      	cmp	lr, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d909      	bls.n	8000408 <__udivmoddi4+0x1a0>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003fa:	f080 809c 	bcs.w	8000536 <__udivmoddi4+0x2ce>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f240 8099 	bls.w	8000536 <__udivmoddi4+0x2ce>
 8000404:	3802      	subs	r0, #2
 8000406:	443c      	add	r4, r7
 8000408:	eba4 040e 	sub.w	r4, r4, lr
 800040c:	fa1f fe83 	uxth.w	lr, r3
 8000410:	fbb4 f3f9 	udiv	r3, r4, r9
 8000414:	fb09 4413 	mls	r4, r9, r3, r4
 8000418:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800041c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000420:	45a4      	cmp	ip, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1ce>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f103 3eff 	add.w	lr, r3, #4294967295
 800042a:	f080 8082 	bcs.w	8000532 <__udivmoddi4+0x2ca>
 800042e:	45a4      	cmp	ip, r4
 8000430:	d97f      	bls.n	8000532 <__udivmoddi4+0x2ca>
 8000432:	3b02      	subs	r3, #2
 8000434:	443c      	add	r4, r7
 8000436:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000442:	4564      	cmp	r4, ip
 8000444:	4673      	mov	r3, lr
 8000446:	46e1      	mov	r9, ip
 8000448:	d362      	bcc.n	8000510 <__udivmoddi4+0x2a8>
 800044a:	d05f      	beq.n	800050c <__udivmoddi4+0x2a4>
 800044c:	b15d      	cbz	r5, 8000466 <__udivmoddi4+0x1fe>
 800044e:	ebb8 0203 	subs.w	r2, r8, r3
 8000452:	eb64 0409 	sbc.w	r4, r4, r9
 8000456:	fa04 f606 	lsl.w	r6, r4, r6
 800045a:	fa22 f301 	lsr.w	r3, r2, r1
 800045e:	431e      	orrs	r6, r3
 8000460:	40cc      	lsrs	r4, r1
 8000462:	e9c5 6400 	strd	r6, r4, [r5]
 8000466:	2100      	movs	r1, #0
 8000468:	e74f      	b.n	800030a <__udivmoddi4+0xa2>
 800046a:	fbb1 fcf2 	udiv	ip, r1, r2
 800046e:	0c01      	lsrs	r1, r0, #16
 8000470:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000474:	b280      	uxth	r0, r0
 8000476:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800047a:	463b      	mov	r3, r7
 800047c:	4638      	mov	r0, r7
 800047e:	463c      	mov	r4, r7
 8000480:	46b8      	mov	r8, r7
 8000482:	46be      	mov	lr, r7
 8000484:	2620      	movs	r6, #32
 8000486:	fbb1 f1f7 	udiv	r1, r1, r7
 800048a:	eba2 0208 	sub.w	r2, r2, r8
 800048e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000492:	e766      	b.n	8000362 <__udivmoddi4+0xfa>
 8000494:	4601      	mov	r1, r0
 8000496:	e718      	b.n	80002ca <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e72c      	b.n	80002f6 <__udivmoddi4+0x8e>
 800049c:	f1c6 0220 	rsb	r2, r6, #32
 80004a0:	fa2e f302 	lsr.w	r3, lr, r2
 80004a4:	40b7      	lsls	r7, r6
 80004a6:	40b1      	lsls	r1, r6
 80004a8:	fa20 f202 	lsr.w	r2, r0, r2
 80004ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b0:	430a      	orrs	r2, r1
 80004b2:	fbb3 f8fe 	udiv	r8, r3, lr
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	fb0e 3318 	mls	r3, lr, r8, r3
 80004bc:	0c11      	lsrs	r1, r2, #16
 80004be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c2:	fb08 f904 	mul.w	r9, r8, r4
 80004c6:	40b0      	lsls	r0, r6
 80004c8:	4589      	cmp	r9, r1
 80004ca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ce:	b280      	uxth	r0, r0
 80004d0:	d93e      	bls.n	8000550 <__udivmoddi4+0x2e8>
 80004d2:	1879      	adds	r1, r7, r1
 80004d4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d8:	d201      	bcs.n	80004de <__udivmoddi4+0x276>
 80004da:	4589      	cmp	r9, r1
 80004dc:	d81f      	bhi.n	800051e <__udivmoddi4+0x2b6>
 80004de:	eba1 0109 	sub.w	r1, r1, r9
 80004e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e6:	fb09 f804 	mul.w	r8, r9, r4
 80004ea:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ee:	b292      	uxth	r2, r2
 80004f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f4:	4542      	cmp	r2, r8
 80004f6:	d229      	bcs.n	800054c <__udivmoddi4+0x2e4>
 80004f8:	18ba      	adds	r2, r7, r2
 80004fa:	f109 31ff 	add.w	r1, r9, #4294967295
 80004fe:	d2c4      	bcs.n	800048a <__udivmoddi4+0x222>
 8000500:	4542      	cmp	r2, r8
 8000502:	d2c2      	bcs.n	800048a <__udivmoddi4+0x222>
 8000504:	f1a9 0102 	sub.w	r1, r9, #2
 8000508:	443a      	add	r2, r7
 800050a:	e7be      	b.n	800048a <__udivmoddi4+0x222>
 800050c:	45f0      	cmp	r8, lr
 800050e:	d29d      	bcs.n	800044c <__udivmoddi4+0x1e4>
 8000510:	ebbe 0302 	subs.w	r3, lr, r2
 8000514:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000518:	3801      	subs	r0, #1
 800051a:	46e1      	mov	r9, ip
 800051c:	e796      	b.n	800044c <__udivmoddi4+0x1e4>
 800051e:	eba7 0909 	sub.w	r9, r7, r9
 8000522:	4449      	add	r1, r9
 8000524:	f1a8 0c02 	sub.w	ip, r8, #2
 8000528:	fbb1 f9fe 	udiv	r9, r1, lr
 800052c:	fb09 f804 	mul.w	r8, r9, r4
 8000530:	e7db      	b.n	80004ea <__udivmoddi4+0x282>
 8000532:	4673      	mov	r3, lr
 8000534:	e77f      	b.n	8000436 <__udivmoddi4+0x1ce>
 8000536:	4650      	mov	r0, sl
 8000538:	e766      	b.n	8000408 <__udivmoddi4+0x1a0>
 800053a:	4608      	mov	r0, r1
 800053c:	e6fd      	b.n	800033a <__udivmoddi4+0xd2>
 800053e:	443b      	add	r3, r7
 8000540:	3a02      	subs	r2, #2
 8000542:	e733      	b.n	80003ac <__udivmoddi4+0x144>
 8000544:	f1ac 0c02 	sub.w	ip, ip, #2
 8000548:	443b      	add	r3, r7
 800054a:	e71c      	b.n	8000386 <__udivmoddi4+0x11e>
 800054c:	4649      	mov	r1, r9
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x222>
 8000550:	eba1 0109 	sub.w	r1, r1, r9
 8000554:	46c4      	mov	ip, r8
 8000556:	fbb1 f9fe 	udiv	r9, r1, lr
 800055a:	fb09 f804 	mul.w	r8, r9, r4
 800055e:	e7c4      	b.n	80004ea <__udivmoddi4+0x282>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000568:	f000 f96a 	bl	8000840 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 fa99 	bl	8000aa2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f89a 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 f924 	bl	80007c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000578:	f000 f8f2 	bl	8000760 <MX_USART2_UART_Init>
  HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 20);
 800057c:	2214      	movs	r2, #20
 800057e:	4931      	ldr	r1, [pc, #196]	@ (8000644 <main+0xe0>)
 8000580:	4831      	ldr	r0, [pc, #196]	@ (8000648 <main+0xe4>)
 8000582:	f001 ffd7 	bl	8002534 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      if (uart_data_ready)
 8000586:	4b31      	ldr	r3, [pc, #196]	@ (800064c <main+0xe8>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	b2db      	uxtb	r3, r3
 800058c:	2b00      	cmp	r3, #0
 800058e:	d0fa      	beq.n	8000586 <main+0x22>
      {
          uart_data_ready = 0;
 8000590:	4b2e      	ldr	r3, [pc, #184]	@ (800064c <main+0xe8>)
 8000592:	2200      	movs	r2, #0
 8000594:	701a      	strb	r2, [r3, #0]

          if (strncmp((char*)uart_rx_buffer, "{LED:01,STATE:ON}", 17) == 0)
 8000596:	2211      	movs	r2, #17
 8000598:	492d      	ldr	r1, [pc, #180]	@ (8000650 <main+0xec>)
 800059a:	482a      	ldr	r0, [pc, #168]	@ (8000644 <main+0xe0>)
 800059c:	f003 fa6c 	bl	8003a78 <strncmp>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d105      	bne.n	80005b2 <main+0x4e>
              HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80005a6:	2201      	movs	r2, #1
 80005a8:	2101      	movs	r1, #1
 80005aa:	482a      	ldr	r0, [pc, #168]	@ (8000654 <main+0xf0>)
 80005ac:	f000 fe9e 	bl	80012ec <HAL_GPIO_WritePin>
 80005b0:	e7e9      	b.n	8000586 <main+0x22>
          else if (strncmp((char*)uart_rx_buffer, "{LED:01,STATE:OFF}", 18) == 0)
 80005b2:	2212      	movs	r2, #18
 80005b4:	4928      	ldr	r1, [pc, #160]	@ (8000658 <main+0xf4>)
 80005b6:	4823      	ldr	r0, [pc, #140]	@ (8000644 <main+0xe0>)
 80005b8:	f003 fa5e 	bl	8003a78 <strncmp>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d105      	bne.n	80005ce <main+0x6a>
              HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2101      	movs	r1, #1
 80005c6:	4823      	ldr	r0, [pc, #140]	@ (8000654 <main+0xf0>)
 80005c8:	f000 fe90 	bl	80012ec <HAL_GPIO_WritePin>
 80005cc:	e7db      	b.n	8000586 <main+0x22>

          else if (strncmp((char*)uart_rx_buffer, "{LED:02,STATE:ON}", 17) == 0)
 80005ce:	2211      	movs	r2, #17
 80005d0:	4922      	ldr	r1, [pc, #136]	@ (800065c <main+0xf8>)
 80005d2:	481c      	ldr	r0, [pc, #112]	@ (8000644 <main+0xe0>)
 80005d4:	f003 fa50 	bl	8003a78 <strncmp>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d105      	bne.n	80005ea <main+0x86>
              HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80005de:	2201      	movs	r2, #1
 80005e0:	2180      	movs	r1, #128	@ 0x80
 80005e2:	481c      	ldr	r0, [pc, #112]	@ (8000654 <main+0xf0>)
 80005e4:	f000 fe82 	bl	80012ec <HAL_GPIO_WritePin>
 80005e8:	e7cd      	b.n	8000586 <main+0x22>
          else if (strncmp((char*)uart_rx_buffer, "{LED:02,STATE:OFF}", 18) == 0)
 80005ea:	2212      	movs	r2, #18
 80005ec:	491c      	ldr	r1, [pc, #112]	@ (8000660 <main+0xfc>)
 80005ee:	4815      	ldr	r0, [pc, #84]	@ (8000644 <main+0xe0>)
 80005f0:	f003 fa42 	bl	8003a78 <strncmp>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d105      	bne.n	8000606 <main+0xa2>
              HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2180      	movs	r1, #128	@ 0x80
 80005fe:	4815      	ldr	r0, [pc, #84]	@ (8000654 <main+0xf0>)
 8000600:	f000 fe74 	bl	80012ec <HAL_GPIO_WritePin>
 8000604:	e7bf      	b.n	8000586 <main+0x22>

          else if (strncmp((char*)uart_rx_buffer, "{LED:03,STATE:ON}", 17) == 0)
 8000606:	2211      	movs	r2, #17
 8000608:	4916      	ldr	r1, [pc, #88]	@ (8000664 <main+0x100>)
 800060a:	480e      	ldr	r0, [pc, #56]	@ (8000644 <main+0xe0>)
 800060c:	f003 fa34 	bl	8003a78 <strncmp>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d106      	bne.n	8000624 <main+0xc0>
              HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000616:	2201      	movs	r2, #1
 8000618:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800061c:	480d      	ldr	r0, [pc, #52]	@ (8000654 <main+0xf0>)
 800061e:	f000 fe65 	bl	80012ec <HAL_GPIO_WritePin>
 8000622:	e7b0      	b.n	8000586 <main+0x22>
          else if (strncmp((char*)uart_rx_buffer, "{LED:03,STATE:OFF}", 18) == 0)
 8000624:	2212      	movs	r2, #18
 8000626:	4910      	ldr	r1, [pc, #64]	@ (8000668 <main+0x104>)
 8000628:	4806      	ldr	r0, [pc, #24]	@ (8000644 <main+0xe0>)
 800062a:	f003 fa25 	bl	8003a78 <strncmp>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d1a8      	bne.n	8000586 <main+0x22>
              HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800063a:	4806      	ldr	r0, [pc, #24]	@ (8000654 <main+0xf0>)
 800063c:	f000 fe56 	bl	80012ec <HAL_GPIO_WritePin>
      if (uart_data_ready)
 8000640:	e7a1      	b.n	8000586 <main+0x22>
 8000642:	bf00      	nop
 8000644:	200000b0 	.word	0x200000b0
 8000648:	20000028 	.word	0x20000028
 800064c:	200000c4 	.word	0x200000c4
 8000650:	08003afc 	.word	0x08003afc
 8000654:	40020400 	.word	0x40020400
 8000658:	08003b10 	.word	0x08003b10
 800065c:	08003b24 	.word	0x08003b24
 8000660:	08003b38 	.word	0x08003b38
 8000664:	08003b4c 	.word	0x08003b4c
 8000668:	08003b60 	.word	0x08003b60

0800066c <HAL_UART_RxCpltCallback>:

  /* USER CODE END 3 */
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a07      	ldr	r2, [pc, #28]	@ (8000698 <HAL_UART_RxCpltCallback+0x2c>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d107      	bne.n	800068e <HAL_UART_RxCpltCallback+0x22>
    {
        uart_data_ready = 1;
 800067e:	4b07      	ldr	r3, [pc, #28]	@ (800069c <HAL_UART_RxCpltCallback+0x30>)
 8000680:	2201      	movs	r2, #1
 8000682:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 20);
 8000684:	2214      	movs	r2, #20
 8000686:	4906      	ldr	r1, [pc, #24]	@ (80006a0 <HAL_UART_RxCpltCallback+0x34>)
 8000688:	4806      	ldr	r0, [pc, #24]	@ (80006a4 <HAL_UART_RxCpltCallback+0x38>)
 800068a:	f001 ff53 	bl	8002534 <HAL_UART_Receive_IT>
    }
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40004400 	.word	0x40004400
 800069c:	200000c4 	.word	0x200000c4
 80006a0:	200000b0 	.word	0x200000b0
 80006a4:	20000028 	.word	0x20000028

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b094      	sub	sp, #80	@ 0x50
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	2234      	movs	r2, #52	@ 0x34
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f003 f9d6 	bl	8003a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	f107 0308 	add.w	r3, r7, #8
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006cc:	4b22      	ldr	r3, [pc, #136]	@ (8000758 <SystemClock_Config+0xb0>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d0:	4a21      	ldr	r2, [pc, #132]	@ (8000758 <SystemClock_Config+0xb0>)
 80006d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000758 <SystemClock_Config+0xb0>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006e4:	4b1d      	ldr	r3, [pc, #116]	@ (800075c <SystemClock_Config+0xb4>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006ec:	4a1b      	ldr	r2, [pc, #108]	@ (800075c <SystemClock_Config+0xb4>)
 80006ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4b19      	ldr	r3, [pc, #100]	@ (800075c <SystemClock_Config+0xb4>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006fc:	603b      	str	r3, [r7, #0]
 80006fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000700:	2302      	movs	r3, #2
 8000702:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000704:	2301      	movs	r3, #1
 8000706:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000708:	2310      	movs	r3, #16
 800070a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800070c:	2300      	movs	r3, #0
 800070e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000710:	f107 031c 	add.w	r3, r7, #28
 8000714:	4618      	mov	r0, r3
 8000716:	f000 fe03 	bl	8001320 <HAL_RCC_OscConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000720:	f000 f8ba 	bl	8000898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000724:	230f      	movs	r3, #15
 8000726:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000728:	2300      	movs	r3, #0
 800072a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000738:	f107 0308 	add.w	r3, r7, #8
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f001 f89c 	bl	800187c <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800074a:	f000 f8a5 	bl	8000898 <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3750      	adds	r7, #80	@ 0x50
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000764:	4b14      	ldr	r3, [pc, #80]	@ (80007b8 <MX_USART2_UART_Init+0x58>)
 8000766:	4a15      	ldr	r2, [pc, #84]	@ (80007bc <MX_USART2_UART_Init+0x5c>)
 8000768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800076a:	4b13      	ldr	r3, [pc, #76]	@ (80007b8 <MX_USART2_UART_Init+0x58>)
 800076c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <MX_USART2_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000778:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <MX_USART2_UART_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800077e:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <MX_USART2_UART_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000784:	4b0c      	ldr	r3, [pc, #48]	@ (80007b8 <MX_USART2_UART_Init+0x58>)
 8000786:	220c      	movs	r2, #12
 8000788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078a:	4b0b      	ldr	r3, [pc, #44]	@ (80007b8 <MX_USART2_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000790:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <MX_USART2_UART_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000796:	4b08      	ldr	r3, [pc, #32]	@ (80007b8 <MX_USART2_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800079c:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <MX_USART2_UART_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a2:	4805      	ldr	r0, [pc, #20]	@ (80007b8 <MX_USART2_UART_Init+0x58>)
 80007a4:	f001 fe78 	bl	8002498 <HAL_UART_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007ae:	f000 f873 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000028 	.word	0x20000028
 80007bc:	40004400 	.word	0x40004400

080007c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	4b18      	ldr	r3, [pc, #96]	@ (8000838 <MX_GPIO_Init+0x78>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a17      	ldr	r2, [pc, #92]	@ (8000838 <MX_GPIO_Init+0x78>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <MX_GPIO_Init+0x78>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	4b12      	ldr	r3, [pc, #72]	@ (8000838 <MX_GPIO_Init+0x78>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a11      	ldr	r2, [pc, #68]	@ (8000838 <MX_GPIO_Init+0x78>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <MX_GPIO_Init+0x78>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f244 0181 	movw	r1, #16513	@ 0x4081
 800080c:	480b      	ldr	r0, [pc, #44]	@ (800083c <MX_GPIO_Init+0x7c>)
 800080e:	f000 fd6d 	bl	80012ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8000812:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000816:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	4619      	mov	r1, r3
 800082a:	4804      	ldr	r0, [pc, #16]	@ (800083c <MX_GPIO_Init+0x7c>)
 800082c:	f000 fbb2 	bl	8000f94 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000830:	bf00      	nop
 8000832:	3720      	adds	r7, #32
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	40020400 	.word	0x40020400

08000840 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000846:	463b      	mov	r3, r7
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000852:	f000 fa95 	bl	8000d80 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000856:	2301      	movs	r3, #1
 8000858:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800085a:	2300      	movs	r3, #0
 800085c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000862:	231f      	movs	r3, #31
 8000864:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000866:	2387      	movs	r3, #135	@ 0x87
 8000868:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800086a:	2300      	movs	r3, #0
 800086c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800086e:	2300      	movs	r3, #0
 8000870:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000872:	2301      	movs	r3, #1
 8000874:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000876:	2301      	movs	r3, #1
 8000878:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800087a:	2300      	movs	r3, #0
 800087c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800087e:	2300      	movs	r3, #0
 8000880:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000882:	463b      	mov	r3, r7
 8000884:	4618      	mov	r0, r3
 8000886:	f000 fab3 	bl	8000df0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800088a:	2004      	movs	r0, #4
 800088c:	f000 fa90 	bl	8000db0 <HAL_MPU_Enable>

}
 8000890:	bf00      	nop
 8000892:	3710      	adds	r7, #16
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <Error_Handler+0x8>

080008a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008aa:	4b0f      	ldr	r3, [pc, #60]	@ (80008e8 <HAL_MspInit+0x44>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ae:	4a0e      	ldr	r2, [pc, #56]	@ (80008e8 <HAL_MspInit+0x44>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b6:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <HAL_MspInit+0x44>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c2:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <HAL_MspInit+0x44>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c6:	4a08      	ldr	r2, [pc, #32]	@ (80008e8 <HAL_MspInit+0x44>)
 80008c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ce:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <HAL_MspInit+0x44>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b0ae      	sub	sp, #184	@ 0xb8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	2290      	movs	r2, #144	@ 0x90
 800090a:	2100      	movs	r1, #0
 800090c:	4618      	mov	r0, r3
 800090e:	f003 f8ab 	bl	8003a68 <memset>
  if(huart->Instance==USART2)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a25      	ldr	r2, [pc, #148]	@ (80009ac <HAL_UART_MspInit+0xc0>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d142      	bne.n	80009a2 <HAL_UART_MspInit+0xb6>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800091c:	2380      	movs	r3, #128	@ 0x80
 800091e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000920:	2300      	movs	r3, #0
 8000922:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4618      	mov	r0, r3
 800092a:	f001 f98d 	bl	8001c48 <HAL_RCCEx_PeriphCLKConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000934:	f7ff ffb0 	bl	8000898 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000938:	4b1d      	ldr	r3, [pc, #116]	@ (80009b0 <HAL_UART_MspInit+0xc4>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093c:	4a1c      	ldr	r2, [pc, #112]	@ (80009b0 <HAL_UART_MspInit+0xc4>)
 800093e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000942:	6413      	str	r3, [r2, #64]	@ 0x40
 8000944:	4b1a      	ldr	r3, [pc, #104]	@ (80009b0 <HAL_UART_MspInit+0xc4>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000950:	4b17      	ldr	r3, [pc, #92]	@ (80009b0 <HAL_UART_MspInit+0xc4>)
 8000952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000954:	4a16      	ldr	r2, [pc, #88]	@ (80009b0 <HAL_UART_MspInit+0xc4>)
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	6313      	str	r3, [r2, #48]	@ 0x30
 800095c:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <HAL_UART_MspInit+0xc4>)
 800095e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000960:	f003 0301 	and.w	r3, r3, #1
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000968:	230c      	movs	r3, #12
 800096a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097a:	2303      	movs	r3, #3
 800097c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000980:	2307      	movs	r3, #7
 8000982:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800098a:	4619      	mov	r1, r3
 800098c:	4809      	ldr	r0, [pc, #36]	@ (80009b4 <HAL_UART_MspInit+0xc8>)
 800098e:	f000 fb01 	bl	8000f94 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	2026      	movs	r0, #38	@ 0x26
 8000998:	f000 f9bb 	bl	8000d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800099c:	2026      	movs	r0, #38	@ 0x26
 800099e:	f000 f9d4 	bl	8000d4a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80009a2:	bf00      	nop
 80009a4:	37b8      	adds	r7, #184	@ 0xb8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40004400 	.word	0x40004400
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020000 	.word	0x40020000

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <NMI_Handler+0x4>

080009c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <HardFault_Handler+0x4>

080009c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <MemManage_Handler+0x4>

080009d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <BusFault_Handler+0x4>

080009d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <UsageFault_Handler+0x4>

080009e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a0e:	f000 f885 	bl	8000b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a1c:	4802      	ldr	r0, [pc, #8]	@ (8000a28 <USART2_IRQHandler+0x10>)
 8000a1e:	f001 fdcd 	bl	80025bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000028 	.word	0x20000028

08000a2c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a30:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <SystemInit+0x20>)
 8000a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a36:	4a05      	ldr	r2, [pc, #20]	@ (8000a4c <SystemInit+0x20>)
 8000a38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a54:	f7ff ffea 	bl	8000a2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a58:	480c      	ldr	r0, [pc, #48]	@ (8000a8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a5a:	490d      	ldr	r1, [pc, #52]	@ (8000a90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a60:	e002      	b.n	8000a68 <LoopCopyDataInit>

08000a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a66:	3304      	adds	r3, #4

08000a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a6c:	d3f9      	bcc.n	8000a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a70:	4c0a      	ldr	r4, [pc, #40]	@ (8000a9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a74:	e001      	b.n	8000a7a <LoopFillZerobss>

08000a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a78:	3204      	adds	r2, #4

08000a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a7c:	d3fb      	bcc.n	8000a76 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a7e:	f003 f80d 	bl	8003a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a82:	f7ff fd6f 	bl	8000564 <main>
  bx  lr    
 8000a86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a88:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a90:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a94:	08003b9c 	.word	0x08003b9c
  ldr r2, =_sbss
 8000a98:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a9c:	200000cc 	.word	0x200000cc

08000aa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa0:	e7fe      	b.n	8000aa0 <ADC_IRQHandler>

08000aa2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa6:	2003      	movs	r0, #3
 8000aa8:	f000 f928 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aac:	200f      	movs	r0, #15
 8000aae:	f000 f805 	bl	8000abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab2:	f7ff fef7 	bl	80008a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab6:	2300      	movs	r3, #0
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	bd80      	pop	{r7, pc}

08000abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac4:	4b12      	ldr	r3, [pc, #72]	@ (8000b10 <HAL_InitTick+0x54>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b12      	ldr	r3, [pc, #72]	@ (8000b14 <HAL_InitTick+0x58>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	4619      	mov	r1, r3
 8000ace:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 f943 	bl	8000d66 <HAL_SYSTICK_Config>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e00e      	b.n	8000b08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2b0f      	cmp	r3, #15
 8000aee:	d80a      	bhi.n	8000b06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af0:	2200      	movs	r2, #0
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	f04f 30ff 	mov.w	r0, #4294967295
 8000af8:	f000 f90b 	bl	8000d12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000afc:	4a06      	ldr	r2, [pc, #24]	@ (8000b18 <HAL_InitTick+0x5c>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b02:	2300      	movs	r3, #0
 8000b04:	e000      	b.n	8000b08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000000 	.word	0x20000000
 8000b14:	20000008 	.word	0x20000008
 8000b18:	20000004 	.word	0x20000004

08000b1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b20:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <HAL_IncTick+0x20>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <HAL_IncTick+0x24>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	4a04      	ldr	r2, [pc, #16]	@ (8000b40 <HAL_IncTick+0x24>)
 8000b2e:	6013      	str	r3, [r2, #0]
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	200000c8 	.word	0x200000c8

08000b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return uwTick;
 8000b48:	4b03      	ldr	r3, [pc, #12]	@ (8000b58 <HAL_GetTick+0x14>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	200000c8 	.word	0x200000c8

08000b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b9c <__NVIC_SetPriorityGrouping+0x40>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b84:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b86:	4313      	orrs	r3, r2
 8000b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8a:	4a04      	ldr	r2, [pc, #16]	@ (8000b9c <__NVIC_SetPriorityGrouping+0x40>)
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	60d3      	str	r3, [r2, #12]
}
 8000b90:	bf00      	nop
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000ed00 	.word	0xe000ed00
 8000ba0:	05fa0000 	.word	0x05fa0000

08000ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba8:	4b04      	ldr	r3, [pc, #16]	@ (8000bbc <__NVIC_GetPriorityGrouping+0x18>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	0a1b      	lsrs	r3, r3, #8
 8000bae:	f003 0307 	and.w	r3, r3, #7
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	db0b      	blt.n	8000bea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	f003 021f 	and.w	r2, r3, #31
 8000bd8:	4907      	ldr	r1, [pc, #28]	@ (8000bf8 <__NVIC_EnableIRQ+0x38>)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	095b      	lsrs	r3, r3, #5
 8000be0:	2001      	movs	r0, #1
 8000be2:	fa00 f202 	lsl.w	r2, r0, r2
 8000be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000e100 	.word	0xe000e100

08000bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	6039      	str	r1, [r7, #0]
 8000c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	db0a      	blt.n	8000c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	490c      	ldr	r1, [pc, #48]	@ (8000c48 <__NVIC_SetPriority+0x4c>)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	0112      	lsls	r2, r2, #4
 8000c1c:	b2d2      	uxtb	r2, r2
 8000c1e:	440b      	add	r3, r1
 8000c20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c24:	e00a      	b.n	8000c3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4908      	ldr	r1, [pc, #32]	@ (8000c4c <__NVIC_SetPriority+0x50>)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	f003 030f 	and.w	r3, r3, #15
 8000c32:	3b04      	subs	r3, #4
 8000c34:	0112      	lsls	r2, r2, #4
 8000c36:	b2d2      	uxtb	r2, r2
 8000c38:	440b      	add	r3, r1
 8000c3a:	761a      	strb	r2, [r3, #24]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000e100 	.word	0xe000e100
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b089      	sub	sp, #36	@ 0x24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	f1c3 0307 	rsb	r3, r3, #7
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	bf28      	it	cs
 8000c6e:	2304      	movcs	r3, #4
 8000c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3304      	adds	r3, #4
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d902      	bls.n	8000c80 <NVIC_EncodePriority+0x30>
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3b03      	subs	r3, #3
 8000c7e:	e000      	b.n	8000c82 <NVIC_EncodePriority+0x32>
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	f04f 32ff 	mov.w	r2, #4294967295
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43da      	mvns	r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	401a      	ands	r2, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c98:	f04f 31ff 	mov.w	r1, #4294967295
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	43d9      	mvns	r1, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	4313      	orrs	r3, r2
         );
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3724      	adds	r7, #36	@ 0x24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
	...

08000cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cc8:	d301      	bcc.n	8000cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00f      	b.n	8000cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cce:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf8 <SysTick_Config+0x40>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f7ff ff8e 	bl	8000bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce0:	4b05      	ldr	r3, [pc, #20]	@ (8000cf8 <SysTick_Config+0x40>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce6:	4b04      	ldr	r3, [pc, #16]	@ (8000cf8 <SysTick_Config+0x40>)
 8000ce8:	2207      	movs	r2, #7
 8000cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	e000e010 	.word	0xe000e010

08000cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff ff29 	bl	8000b5c <__NVIC_SetPriorityGrouping>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
 8000d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d24:	f7ff ff3e 	bl	8000ba4 <__NVIC_GetPriorityGrouping>
 8000d28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	68b9      	ldr	r1, [r7, #8]
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	f7ff ff8e 	bl	8000c50 <NVIC_EncodePriority>
 8000d34:	4602      	mov	r2, r0
 8000d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff5d 	bl	8000bfc <__NVIC_SetPriority>
}
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	4603      	mov	r3, r0
 8000d52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff31 	bl	8000bc0 <__NVIC_EnableIRQ>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff ffa2 	bl	8000cb8 <SysTick_Config>
 8000d74:	4603      	mov	r3, r0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000d84:	f3bf 8f5f 	dmb	sy
}
 8000d88:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000d8a:	4b07      	ldr	r3, [pc, #28]	@ (8000da8 <HAL_MPU_Disable+0x28>)
 8000d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d8e:	4a06      	ldr	r2, [pc, #24]	@ (8000da8 <HAL_MPU_Disable+0x28>)
 8000d90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d94:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000d96:	4b05      	ldr	r3, [pc, #20]	@ (8000dac <HAL_MPU_Disable+0x2c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	605a      	str	r2, [r3, #4]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00
 8000dac:	e000ed90 	.word	0xe000ed90

08000db0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000db8:	4a0b      	ldr	r2, [pc, #44]	@ (8000de8 <HAL_MPU_Enable+0x38>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dec <HAL_MPU_Enable+0x3c>)
 8000dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dc6:	4a09      	ldr	r2, [pc, #36]	@ (8000dec <HAL_MPU_Enable+0x3c>)
 8000dc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dcc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000dce:	f3bf 8f4f 	dsb	sy
}
 8000dd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dd4:	f3bf 8f6f 	isb	sy
}
 8000dd8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000ed90 	.word	0xe000ed90
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	785a      	ldrb	r2, [r3, #1]
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e6c <HAL_MPU_ConfigRegion+0x7c>)
 8000dfe:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000e00:	4b1a      	ldr	r3, [pc, #104]	@ (8000e6c <HAL_MPU_ConfigRegion+0x7c>)
 8000e02:	691b      	ldr	r3, [r3, #16]
 8000e04:	4a19      	ldr	r2, [pc, #100]	@ (8000e6c <HAL_MPU_ConfigRegion+0x7c>)
 8000e06:	f023 0301 	bic.w	r3, r3, #1
 8000e0a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000e0c:	4a17      	ldr	r2, [pc, #92]	@ (8000e6c <HAL_MPU_ConfigRegion+0x7c>)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	7b1b      	ldrb	r3, [r3, #12]
 8000e18:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	7adb      	ldrb	r3, [r3, #11]
 8000e1e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e20:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	7a9b      	ldrb	r3, [r3, #10]
 8000e26:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e28:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	7b5b      	ldrb	r3, [r3, #13]
 8000e2e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000e30:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	7b9b      	ldrb	r3, [r3, #14]
 8000e36:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000e38:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	7bdb      	ldrb	r3, [r3, #15]
 8000e3e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000e40:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	7a5b      	ldrb	r3, [r3, #9]
 8000e46:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000e48:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	7a1b      	ldrb	r3, [r3, #8]
 8000e4e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000e50:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	7812      	ldrb	r2, [r2, #0]
 8000e56:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e58:	4a04      	ldr	r2, [pc, #16]	@ (8000e6c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000e5a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e5c:	6113      	str	r3, [r2, #16]
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed90 	.word	0xe000ed90

08000e70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e7c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e7e:	f7ff fe61 	bl	8000b44 <HAL_GetTick>
 8000e82:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d008      	beq.n	8000ea2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2280      	movs	r2, #128	@ 0x80
 8000e94:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e052      	b.n	8000f48 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f022 0216 	bic.w	r2, r2, #22
 8000eb0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	695a      	ldr	r2, [r3, #20]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000ec0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d103      	bne.n	8000ed2 <HAL_DMA_Abort+0x62>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d007      	beq.n	8000ee2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f022 0208 	bic.w	r2, r2, #8
 8000ee0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f022 0201 	bic.w	r2, r2, #1
 8000ef0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ef2:	e013      	b.n	8000f1c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ef4:	f7ff fe26 	bl	8000b44 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	2b05      	cmp	r3, #5
 8000f00:	d90c      	bls.n	8000f1c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2220      	movs	r2, #32
 8000f06:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e015      	b.n	8000f48 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d1e4      	bne.n	8000ef4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f2e:	223f      	movs	r2, #63	@ 0x3f
 8000f30:	409a      	lsls	r2, r3
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d004      	beq.n	8000f6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2280      	movs	r2, #128	@ 0x80
 8000f68:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00c      	b.n	8000f88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2205      	movs	r2, #5
 8000f72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f022 0201 	bic.w	r2, r2, #1
 8000f84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b089      	sub	sp, #36	@ 0x24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
 8000fb2:	e175      	b.n	80012a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	697a      	ldr	r2, [r7, #20]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	f040 8164 	bne.w	800129a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d005      	beq.n	8000fea <HAL_GPIO_Init+0x56>
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d130      	bne.n	800104c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4013      	ands	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	68da      	ldr	r2, [r3, #12]
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4313      	orrs	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001020:	2201      	movs	r2, #1
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	091b      	lsrs	r3, r3, #4
 8001036:	f003 0201 	and.w	r2, r3, #1
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	2b03      	cmp	r3, #3
 8001056:	d017      	beq.n	8001088 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	2203      	movs	r2, #3
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	689a      	ldr	r2, [r3, #8]
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 0303 	and.w	r3, r3, #3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d123      	bne.n	80010dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	08da      	lsrs	r2, r3, #3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3208      	adds	r2, #8
 800109c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	f003 0307 	and.w	r3, r3, #7
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	220f      	movs	r2, #15
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	691a      	ldr	r2, [r3, #16]
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	08da      	lsrs	r2, r3, #3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3208      	adds	r2, #8
 80010d6:	69b9      	ldr	r1, [r7, #24]
 80010d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	2203      	movs	r2, #3
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0203 	and.w	r2, r3, #3
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001118:	2b00      	cmp	r3, #0
 800111a:	f000 80be 	beq.w	800129a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111e:	4b66      	ldr	r3, [pc, #408]	@ (80012b8 <HAL_GPIO_Init+0x324>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001122:	4a65      	ldr	r2, [pc, #404]	@ (80012b8 <HAL_GPIO_Init+0x324>)
 8001124:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001128:	6453      	str	r3, [r2, #68]	@ 0x44
 800112a:	4b63      	ldr	r3, [pc, #396]	@ (80012b8 <HAL_GPIO_Init+0x324>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001136:	4a61      	ldr	r2, [pc, #388]	@ (80012bc <HAL_GPIO_Init+0x328>)
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	089b      	lsrs	r3, r3, #2
 800113c:	3302      	adds	r3, #2
 800113e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	f003 0303 	and.w	r3, r3, #3
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	220f      	movs	r2, #15
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a58      	ldr	r2, [pc, #352]	@ (80012c0 <HAL_GPIO_Init+0x32c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d037      	beq.n	80011d2 <HAL_GPIO_Init+0x23e>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a57      	ldr	r2, [pc, #348]	@ (80012c4 <HAL_GPIO_Init+0x330>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d031      	beq.n	80011ce <HAL_GPIO_Init+0x23a>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a56      	ldr	r2, [pc, #344]	@ (80012c8 <HAL_GPIO_Init+0x334>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d02b      	beq.n	80011ca <HAL_GPIO_Init+0x236>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a55      	ldr	r2, [pc, #340]	@ (80012cc <HAL_GPIO_Init+0x338>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d025      	beq.n	80011c6 <HAL_GPIO_Init+0x232>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a54      	ldr	r2, [pc, #336]	@ (80012d0 <HAL_GPIO_Init+0x33c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d01f      	beq.n	80011c2 <HAL_GPIO_Init+0x22e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a53      	ldr	r2, [pc, #332]	@ (80012d4 <HAL_GPIO_Init+0x340>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d019      	beq.n	80011be <HAL_GPIO_Init+0x22a>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a52      	ldr	r2, [pc, #328]	@ (80012d8 <HAL_GPIO_Init+0x344>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d013      	beq.n	80011ba <HAL_GPIO_Init+0x226>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a51      	ldr	r2, [pc, #324]	@ (80012dc <HAL_GPIO_Init+0x348>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d00d      	beq.n	80011b6 <HAL_GPIO_Init+0x222>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a50      	ldr	r2, [pc, #320]	@ (80012e0 <HAL_GPIO_Init+0x34c>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d007      	beq.n	80011b2 <HAL_GPIO_Init+0x21e>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4f      	ldr	r2, [pc, #316]	@ (80012e4 <HAL_GPIO_Init+0x350>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d101      	bne.n	80011ae <HAL_GPIO_Init+0x21a>
 80011aa:	2309      	movs	r3, #9
 80011ac:	e012      	b.n	80011d4 <HAL_GPIO_Init+0x240>
 80011ae:	230a      	movs	r3, #10
 80011b0:	e010      	b.n	80011d4 <HAL_GPIO_Init+0x240>
 80011b2:	2308      	movs	r3, #8
 80011b4:	e00e      	b.n	80011d4 <HAL_GPIO_Init+0x240>
 80011b6:	2307      	movs	r3, #7
 80011b8:	e00c      	b.n	80011d4 <HAL_GPIO_Init+0x240>
 80011ba:	2306      	movs	r3, #6
 80011bc:	e00a      	b.n	80011d4 <HAL_GPIO_Init+0x240>
 80011be:	2305      	movs	r3, #5
 80011c0:	e008      	b.n	80011d4 <HAL_GPIO_Init+0x240>
 80011c2:	2304      	movs	r3, #4
 80011c4:	e006      	b.n	80011d4 <HAL_GPIO_Init+0x240>
 80011c6:	2303      	movs	r3, #3
 80011c8:	e004      	b.n	80011d4 <HAL_GPIO_Init+0x240>
 80011ca:	2302      	movs	r3, #2
 80011cc:	e002      	b.n	80011d4 <HAL_GPIO_Init+0x240>
 80011ce:	2301      	movs	r3, #1
 80011d0:	e000      	b.n	80011d4 <HAL_GPIO_Init+0x240>
 80011d2:	2300      	movs	r3, #0
 80011d4:	69fa      	ldr	r2, [r7, #28]
 80011d6:	f002 0203 	and.w	r2, r2, #3
 80011da:	0092      	lsls	r2, r2, #2
 80011dc:	4093      	lsls	r3, r2
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80011e4:	4935      	ldr	r1, [pc, #212]	@ (80012bc <HAL_GPIO_Init+0x328>)
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	089b      	lsrs	r3, r3, #2
 80011ea:	3302      	adds	r3, #2
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011f2:	4b3d      	ldr	r3, [pc, #244]	@ (80012e8 <HAL_GPIO_Init+0x354>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001216:	4a34      	ldr	r2, [pc, #208]	@ (80012e8 <HAL_GPIO_Init+0x354>)
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800121c:	4b32      	ldr	r3, [pc, #200]	@ (80012e8 <HAL_GPIO_Init+0x354>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001240:	4a29      	ldr	r2, [pc, #164]	@ (80012e8 <HAL_GPIO_Init+0x354>)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001246:	4b28      	ldr	r3, [pc, #160]	@ (80012e8 <HAL_GPIO_Init+0x354>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	43db      	mvns	r3, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4013      	ands	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800126a:	4a1f      	ldr	r2, [pc, #124]	@ (80012e8 <HAL_GPIO_Init+0x354>)
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001270:	4b1d      	ldr	r3, [pc, #116]	@ (80012e8 <HAL_GPIO_Init+0x354>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d003      	beq.n	8001294 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001294:	4a14      	ldr	r2, [pc, #80]	@ (80012e8 <HAL_GPIO_Init+0x354>)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3301      	adds	r3, #1
 800129e:	61fb      	str	r3, [r7, #28]
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	2b0f      	cmp	r3, #15
 80012a4:	f67f ae86 	bls.w	8000fb4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80012a8:	bf00      	nop
 80012aa:	bf00      	nop
 80012ac:	3724      	adds	r7, #36	@ 0x24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40013800 	.word	0x40013800
 80012c0:	40020000 	.word	0x40020000
 80012c4:	40020400 	.word	0x40020400
 80012c8:	40020800 	.word	0x40020800
 80012cc:	40020c00 	.word	0x40020c00
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40021400 	.word	0x40021400
 80012d8:	40021800 	.word	0x40021800
 80012dc:	40021c00 	.word	0x40021c00
 80012e0:	40022000 	.word	0x40022000
 80012e4:	40022400 	.word	0x40022400
 80012e8:	40013c00 	.word	0x40013c00

080012ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	807b      	strh	r3, [r7, #2]
 80012f8:	4613      	mov	r3, r2
 80012fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012fc:	787b      	ldrb	r3, [r7, #1]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001302:	887a      	ldrh	r2, [r7, #2]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001308:	e003      	b.n	8001312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800130a:	887b      	ldrh	r3, [r7, #2]
 800130c:	041a      	lsls	r2, r3, #16
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	619a      	str	r2, [r3, #24]
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001328:	2300      	movs	r3, #0
 800132a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e29b      	b.n	800186e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 8087 	beq.w	8001452 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001344:	4b96      	ldr	r3, [pc, #600]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f003 030c 	and.w	r3, r3, #12
 800134c:	2b04      	cmp	r3, #4
 800134e:	d00c      	beq.n	800136a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001350:	4b93      	ldr	r3, [pc, #588]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	f003 030c 	and.w	r3, r3, #12
 8001358:	2b08      	cmp	r3, #8
 800135a:	d112      	bne.n	8001382 <HAL_RCC_OscConfig+0x62>
 800135c:	4b90      	ldr	r3, [pc, #576]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001364:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001368:	d10b      	bne.n	8001382 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800136a:	4b8d      	ldr	r3, [pc, #564]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d06c      	beq.n	8001450 <HAL_RCC_OscConfig+0x130>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d168      	bne.n	8001450 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e275      	b.n	800186e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800138a:	d106      	bne.n	800139a <HAL_RCC_OscConfig+0x7a>
 800138c:	4b84      	ldr	r3, [pc, #528]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a83      	ldr	r2, [pc, #524]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 8001392:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	e02e      	b.n	80013f8 <HAL_RCC_OscConfig+0xd8>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d10c      	bne.n	80013bc <HAL_RCC_OscConfig+0x9c>
 80013a2:	4b7f      	ldr	r3, [pc, #508]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a7e      	ldr	r2, [pc, #504]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 80013a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	4b7c      	ldr	r3, [pc, #496]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a7b      	ldr	r2, [pc, #492]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 80013b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	e01d      	b.n	80013f8 <HAL_RCC_OscConfig+0xd8>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013c4:	d10c      	bne.n	80013e0 <HAL_RCC_OscConfig+0xc0>
 80013c6:	4b76      	ldr	r3, [pc, #472]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a75      	ldr	r2, [pc, #468]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 80013cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	4b73      	ldr	r3, [pc, #460]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a72      	ldr	r2, [pc, #456]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 80013d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	e00b      	b.n	80013f8 <HAL_RCC_OscConfig+0xd8>
 80013e0:	4b6f      	ldr	r3, [pc, #444]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a6e      	ldr	r2, [pc, #440]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 80013e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	4b6c      	ldr	r3, [pc, #432]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a6b      	ldr	r2, [pc, #428]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 80013f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d013      	beq.n	8001428 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001400:	f7ff fba0 	bl	8000b44 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001408:	f7ff fb9c 	bl	8000b44 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b64      	cmp	r3, #100	@ 0x64
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e229      	b.n	800186e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141a:	4b61      	ldr	r3, [pc, #388]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f0      	beq.n	8001408 <HAL_RCC_OscConfig+0xe8>
 8001426:	e014      	b.n	8001452 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001428:	f7ff fb8c 	bl	8000b44 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001430:	f7ff fb88 	bl	8000b44 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b64      	cmp	r3, #100	@ 0x64
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e215      	b.n	800186e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001442:	4b57      	ldr	r3, [pc, #348]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f0      	bne.n	8001430 <HAL_RCC_OscConfig+0x110>
 800144e:	e000      	b.n	8001452 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d069      	beq.n	8001532 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800145e:	4b50      	ldr	r3, [pc, #320]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b00      	cmp	r3, #0
 8001468:	d00b      	beq.n	8001482 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800146a:	4b4d      	ldr	r3, [pc, #308]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f003 030c 	and.w	r3, r3, #12
 8001472:	2b08      	cmp	r3, #8
 8001474:	d11c      	bne.n	80014b0 <HAL_RCC_OscConfig+0x190>
 8001476:	4b4a      	ldr	r3, [pc, #296]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d116      	bne.n	80014b0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001482:	4b47      	ldr	r3, [pc, #284]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d005      	beq.n	800149a <HAL_RCC_OscConfig+0x17a>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d001      	beq.n	800149a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e1e9      	b.n	800186e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149a:	4b41      	ldr	r3, [pc, #260]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	493d      	ldr	r1, [pc, #244]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ae:	e040      	b.n	8001532 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d023      	beq.n	8001500 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014b8:	4b39      	ldr	r3, [pc, #228]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a38      	ldr	r2, [pc, #224]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c4:	f7ff fb3e 	bl	8000b44 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014cc:	f7ff fb3a 	bl	8000b44 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e1c7      	b.n	800186e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014de:	4b30      	ldr	r3, [pc, #192]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0f0      	beq.n	80014cc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ea:	4b2d      	ldr	r3, [pc, #180]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	4929      	ldr	r1, [pc, #164]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	600b      	str	r3, [r1, #0]
 80014fe:	e018      	b.n	8001532 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001500:	4b27      	ldr	r3, [pc, #156]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a26      	ldr	r2, [pc, #152]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 8001506:	f023 0301 	bic.w	r3, r3, #1
 800150a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150c:	f7ff fb1a 	bl	8000b44 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001514:	f7ff fb16 	bl	8000b44 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e1a3      	b.n	800186e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001526:	4b1e      	ldr	r3, [pc, #120]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f0      	bne.n	8001514 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0308 	and.w	r3, r3, #8
 800153a:	2b00      	cmp	r3, #0
 800153c:	d038      	beq.n	80015b0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d019      	beq.n	800157a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001546:	4b16      	ldr	r3, [pc, #88]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 8001548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800154a:	4a15      	ldr	r2, [pc, #84]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001552:	f7ff faf7 	bl	8000b44 <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800155a:	f7ff faf3 	bl	8000b44 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e180      	b.n	800186e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156c:	4b0c      	ldr	r3, [pc, #48]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 800156e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0f0      	beq.n	800155a <HAL_RCC_OscConfig+0x23a>
 8001578:	e01a      	b.n	80015b0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800157a:	4b09      	ldr	r3, [pc, #36]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 800157c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800157e:	4a08      	ldr	r2, [pc, #32]	@ (80015a0 <HAL_RCC_OscConfig+0x280>)
 8001580:	f023 0301 	bic.w	r3, r3, #1
 8001584:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001586:	f7ff fadd 	bl	8000b44 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800158c:	e00a      	b.n	80015a4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800158e:	f7ff fad9 	bl	8000b44 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d903      	bls.n	80015a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e166      	b.n	800186e <HAL_RCC_OscConfig+0x54e>
 80015a0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a4:	4b92      	ldr	r3, [pc, #584]	@ (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 80015a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1ee      	bne.n	800158e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f000 80a4 	beq.w	8001706 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015be:	4b8c      	ldr	r3, [pc, #560]	@ (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d10d      	bne.n	80015e6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	4b89      	ldr	r3, [pc, #548]	@ (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ce:	4a88      	ldr	r2, [pc, #544]	@ (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 80015d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015d6:	4b86      	ldr	r3, [pc, #536]	@ (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015e2:	2301      	movs	r3, #1
 80015e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015e6:	4b83      	ldr	r3, [pc, #524]	@ (80017f4 <HAL_RCC_OscConfig+0x4d4>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d118      	bne.n	8001624 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80015f2:	4b80      	ldr	r3, [pc, #512]	@ (80017f4 <HAL_RCC_OscConfig+0x4d4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a7f      	ldr	r2, [pc, #508]	@ (80017f4 <HAL_RCC_OscConfig+0x4d4>)
 80015f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015fe:	f7ff faa1 	bl	8000b44 <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001606:	f7ff fa9d 	bl	8000b44 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b64      	cmp	r3, #100	@ 0x64
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e12a      	b.n	800186e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001618:	4b76      	ldr	r3, [pc, #472]	@ (80017f4 <HAL_RCC_OscConfig+0x4d4>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0f0      	beq.n	8001606 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d106      	bne.n	800163a <HAL_RCC_OscConfig+0x31a>
 800162c:	4b70      	ldr	r3, [pc, #448]	@ (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 800162e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001630:	4a6f      	ldr	r2, [pc, #444]	@ (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	6713      	str	r3, [r2, #112]	@ 0x70
 8001638:	e02d      	b.n	8001696 <HAL_RCC_OscConfig+0x376>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d10c      	bne.n	800165c <HAL_RCC_OscConfig+0x33c>
 8001642:	4b6b      	ldr	r3, [pc, #428]	@ (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 8001644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001646:	4a6a      	ldr	r2, [pc, #424]	@ (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 8001648:	f023 0301 	bic.w	r3, r3, #1
 800164c:	6713      	str	r3, [r2, #112]	@ 0x70
 800164e:	4b68      	ldr	r3, [pc, #416]	@ (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 8001650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001652:	4a67      	ldr	r2, [pc, #412]	@ (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 8001654:	f023 0304 	bic.w	r3, r3, #4
 8001658:	6713      	str	r3, [r2, #112]	@ 0x70
 800165a:	e01c      	b.n	8001696 <HAL_RCC_OscConfig+0x376>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	2b05      	cmp	r3, #5
 8001662:	d10c      	bne.n	800167e <HAL_RCC_OscConfig+0x35e>
 8001664:	4b62      	ldr	r3, [pc, #392]	@ (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 8001666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001668:	4a61      	ldr	r2, [pc, #388]	@ (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 800166a:	f043 0304 	orr.w	r3, r3, #4
 800166e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001670:	4b5f      	ldr	r3, [pc, #380]	@ (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 8001672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001674:	4a5e      	ldr	r2, [pc, #376]	@ (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	6713      	str	r3, [r2, #112]	@ 0x70
 800167c:	e00b      	b.n	8001696 <HAL_RCC_OscConfig+0x376>
 800167e:	4b5c      	ldr	r3, [pc, #368]	@ (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 8001680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001682:	4a5b      	ldr	r2, [pc, #364]	@ (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 8001684:	f023 0301 	bic.w	r3, r3, #1
 8001688:	6713      	str	r3, [r2, #112]	@ 0x70
 800168a:	4b59      	ldr	r3, [pc, #356]	@ (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 800168c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800168e:	4a58      	ldr	r2, [pc, #352]	@ (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 8001690:	f023 0304 	bic.w	r3, r3, #4
 8001694:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d015      	beq.n	80016ca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169e:	f7ff fa51 	bl	8000b44 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a4:	e00a      	b.n	80016bc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a6:	f7ff fa4d 	bl	8000b44 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e0d8      	b.n	800186e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016bc:	4b4c      	ldr	r3, [pc, #304]	@ (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 80016be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0ee      	beq.n	80016a6 <HAL_RCC_OscConfig+0x386>
 80016c8:	e014      	b.n	80016f4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ca:	f7ff fa3b 	bl	8000b44 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016d0:	e00a      	b.n	80016e8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d2:	f7ff fa37 	bl	8000b44 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e0c2      	b.n	800186e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e8:	4b41      	ldr	r3, [pc, #260]	@ (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 80016ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1ee      	bne.n	80016d2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016f4:	7dfb      	ldrb	r3, [r7, #23]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d105      	bne.n	8001706 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016fa:	4b3d      	ldr	r3, [pc, #244]	@ (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fe:	4a3c      	ldr	r2, [pc, #240]	@ (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 8001700:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001704:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 80ae 	beq.w	800186c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001710:	4b37      	ldr	r3, [pc, #220]	@ (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 030c 	and.w	r3, r3, #12
 8001718:	2b08      	cmp	r3, #8
 800171a:	d06d      	beq.n	80017f8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	2b02      	cmp	r3, #2
 8001722:	d14b      	bne.n	80017bc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001724:	4b32      	ldr	r3, [pc, #200]	@ (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a31      	ldr	r2, [pc, #196]	@ (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 800172a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800172e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001730:	f7ff fa08 	bl	8000b44 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001738:	f7ff fa04 	bl	8000b44 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e091      	b.n	800186e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800174a:	4b29      	ldr	r3, [pc, #164]	@ (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f0      	bne.n	8001738 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69da      	ldr	r2, [r3, #28]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a1b      	ldr	r3, [r3, #32]
 800175e:	431a      	orrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001764:	019b      	lsls	r3, r3, #6
 8001766:	431a      	orrs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800176c:	085b      	lsrs	r3, r3, #1
 800176e:	3b01      	subs	r3, #1
 8001770:	041b      	lsls	r3, r3, #16
 8001772:	431a      	orrs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001778:	061b      	lsls	r3, r3, #24
 800177a:	431a      	orrs	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001780:	071b      	lsls	r3, r3, #28
 8001782:	491b      	ldr	r1, [pc, #108]	@ (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 8001784:	4313      	orrs	r3, r2
 8001786:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001788:	4b19      	ldr	r3, [pc, #100]	@ (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a18      	ldr	r2, [pc, #96]	@ (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 800178e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001792:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001794:	f7ff f9d6 	bl	8000b44 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800179c:	f7ff f9d2 	bl	8000b44 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e05f      	b.n	800186e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ae:	4b10      	ldr	r3, [pc, #64]	@ (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0f0      	beq.n	800179c <HAL_RCC_OscConfig+0x47c>
 80017ba:	e057      	b.n	800186c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017bc:	4b0c      	ldr	r3, [pc, #48]	@ (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a0b      	ldr	r2, [pc, #44]	@ (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 80017c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c8:	f7ff f9bc 	bl	8000b44 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d0:	f7ff f9b8 	bl	8000b44 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e045      	b.n	800186e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e2:	4b03      	ldr	r3, [pc, #12]	@ (80017f0 <HAL_RCC_OscConfig+0x4d0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0x4b0>
 80017ee:	e03d      	b.n	800186c <HAL_RCC_OscConfig+0x54c>
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80017f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001878 <HAL_RCC_OscConfig+0x558>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d030      	beq.n	8001868 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001810:	429a      	cmp	r2, r3
 8001812:	d129      	bne.n	8001868 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800181e:	429a      	cmp	r2, r3
 8001820:	d122      	bne.n	8001868 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001828:	4013      	ands	r3, r2
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800182e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001830:	4293      	cmp	r3, r2
 8001832:	d119      	bne.n	8001868 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800183e:	085b      	lsrs	r3, r3, #1
 8001840:	3b01      	subs	r3, #1
 8001842:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001844:	429a      	cmp	r2, r3
 8001846:	d10f      	bne.n	8001868 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001852:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001854:	429a      	cmp	r2, r3
 8001856:	d107      	bne.n	8001868 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001864:	429a      	cmp	r2, r3
 8001866:	d001      	beq.n	800186c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e000      	b.n	800186e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800

0800187c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d101      	bne.n	8001894 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e0d0      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001894:	4b6a      	ldr	r3, [pc, #424]	@ (8001a40 <HAL_RCC_ClockConfig+0x1c4>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 030f 	and.w	r3, r3, #15
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d910      	bls.n	80018c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a2:	4b67      	ldr	r3, [pc, #412]	@ (8001a40 <HAL_RCC_ClockConfig+0x1c4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f023 020f 	bic.w	r2, r3, #15
 80018aa:	4965      	ldr	r1, [pc, #404]	@ (8001a40 <HAL_RCC_ClockConfig+0x1c4>)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b2:	4b63      	ldr	r3, [pc, #396]	@ (8001a40 <HAL_RCC_ClockConfig+0x1c4>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d001      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e0b8      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d020      	beq.n	8001912 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d005      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018dc:	4b59      	ldr	r3, [pc, #356]	@ (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	4a58      	ldr	r2, [pc, #352]	@ (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 80018e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80018e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d005      	beq.n	8001900 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018f4:	4b53      	ldr	r3, [pc, #332]	@ (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	4a52      	ldr	r2, [pc, #328]	@ (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 80018fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80018fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001900:	4b50      	ldr	r3, [pc, #320]	@ (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	494d      	ldr	r1, [pc, #308]	@ (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 800190e:	4313      	orrs	r3, r2
 8001910:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d040      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d107      	bne.n	8001936 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001926:	4b47      	ldr	r3, [pc, #284]	@ (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d115      	bne.n	800195e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e07f      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d107      	bne.n	800194e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800193e:	4b41      	ldr	r3, [pc, #260]	@ (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d109      	bne.n	800195e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e073      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800194e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e06b      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800195e:	4b39      	ldr	r3, [pc, #228]	@ (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f023 0203 	bic.w	r2, r3, #3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	4936      	ldr	r1, [pc, #216]	@ (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 800196c:	4313      	orrs	r3, r2
 800196e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001970:	f7ff f8e8 	bl	8000b44 <HAL_GetTick>
 8001974:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001976:	e00a      	b.n	800198e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001978:	f7ff f8e4 	bl	8000b44 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001986:	4293      	cmp	r3, r2
 8001988:	d901      	bls.n	800198e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e053      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800198e:	4b2d      	ldr	r3, [pc, #180]	@ (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f003 020c 	and.w	r2, r3, #12
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	429a      	cmp	r2, r3
 800199e:	d1eb      	bne.n	8001978 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019a0:	4b27      	ldr	r3, [pc, #156]	@ (8001a40 <HAL_RCC_ClockConfig+0x1c4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 030f 	and.w	r3, r3, #15
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d210      	bcs.n	80019d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ae:	4b24      	ldr	r3, [pc, #144]	@ (8001a40 <HAL_RCC_ClockConfig+0x1c4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f023 020f 	bic.w	r2, r3, #15
 80019b6:	4922      	ldr	r1, [pc, #136]	@ (8001a40 <HAL_RCC_ClockConfig+0x1c4>)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019be:	4b20      	ldr	r3, [pc, #128]	@ (8001a40 <HAL_RCC_ClockConfig+0x1c4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d001      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e032      	b.n	8001a36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d008      	beq.n	80019ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019dc:	4b19      	ldr	r3, [pc, #100]	@ (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	4916      	ldr	r1, [pc, #88]	@ (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d009      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019fa:	4b12      	ldr	r3, [pc, #72]	@ (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	490e      	ldr	r1, [pc, #56]	@ (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a0e:	f000 f821 	bl	8001a54 <HAL_RCC_GetSysClockFreq>
 8001a12:	4602      	mov	r2, r0
 8001a14:	4b0b      	ldr	r3, [pc, #44]	@ (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	091b      	lsrs	r3, r3, #4
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	490a      	ldr	r1, [pc, #40]	@ (8001a48 <HAL_RCC_ClockConfig+0x1cc>)
 8001a20:	5ccb      	ldrb	r3, [r1, r3]
 8001a22:	fa22 f303 	lsr.w	r3, r2, r3
 8001a26:	4a09      	ldr	r2, [pc, #36]	@ (8001a4c <HAL_RCC_ClockConfig+0x1d0>)
 8001a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a2a:	4b09      	ldr	r3, [pc, #36]	@ (8001a50 <HAL_RCC_ClockConfig+0x1d4>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff f844 	bl	8000abc <HAL_InitTick>

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40023c00 	.word	0x40023c00
 8001a44:	40023800 	.word	0x40023800
 8001a48:	08003b74 	.word	0x08003b74
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	20000004 	.word	0x20000004

08001a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a58:	b090      	sub	sp, #64	@ 0x40
 8001a5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a60:	2300      	movs	r3, #0
 8001a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a64:	2300      	movs	r3, #0
 8001a66:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a6c:	4b59      	ldr	r3, [pc, #356]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 030c 	and.w	r3, r3, #12
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d00d      	beq.n	8001a94 <HAL_RCC_GetSysClockFreq+0x40>
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	f200 80a1 	bhi.w	8001bc0 <HAL_RCC_GetSysClockFreq+0x16c>
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d002      	beq.n	8001a88 <HAL_RCC_GetSysClockFreq+0x34>
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d003      	beq.n	8001a8e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a86:	e09b      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a88:	4b53      	ldr	r3, [pc, #332]	@ (8001bd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a8c:	e09b      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a8e:	4b53      	ldr	r3, [pc, #332]	@ (8001bdc <HAL_RCC_GetSysClockFreq+0x188>)
 8001a90:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a92:	e098      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a94:	4b4f      	ldr	r3, [pc, #316]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a9c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001a9e:	4b4d      	ldr	r3, [pc, #308]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d028      	beq.n	8001afc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aaa:	4b4a      	ldr	r3, [pc, #296]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	099b      	lsrs	r3, r3, #6
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	623b      	str	r3, [r7, #32]
 8001ab4:	627a      	str	r2, [r7, #36]	@ 0x24
 8001ab6:	6a3b      	ldr	r3, [r7, #32]
 8001ab8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001abc:	2100      	movs	r1, #0
 8001abe:	4b47      	ldr	r3, [pc, #284]	@ (8001bdc <HAL_RCC_GetSysClockFreq+0x188>)
 8001ac0:	fb03 f201 	mul.w	r2, r3, r1
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	fb00 f303 	mul.w	r3, r0, r3
 8001aca:	4413      	add	r3, r2
 8001acc:	4a43      	ldr	r2, [pc, #268]	@ (8001bdc <HAL_RCC_GetSysClockFreq+0x188>)
 8001ace:	fba0 1202 	umull	r1, r2, r0, r2
 8001ad2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ad4:	460a      	mov	r2, r1
 8001ad6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001ad8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ada:	4413      	add	r3, r2
 8001adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	61bb      	str	r3, [r7, #24]
 8001ae4:	61fa      	str	r2, [r7, #28]
 8001ae6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001aea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001aee:	f7fe fba3 	bl	8000238 <__aeabi_uldivmod>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4613      	mov	r3, r2
 8001af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001afa:	e053      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001afc:	4b35      	ldr	r3, [pc, #212]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	099b      	lsrs	r3, r3, #6
 8001b02:	2200      	movs	r2, #0
 8001b04:	613b      	str	r3, [r7, #16]
 8001b06:	617a      	str	r2, [r7, #20]
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b0e:	f04f 0b00 	mov.w	fp, #0
 8001b12:	4652      	mov	r2, sl
 8001b14:	465b      	mov	r3, fp
 8001b16:	f04f 0000 	mov.w	r0, #0
 8001b1a:	f04f 0100 	mov.w	r1, #0
 8001b1e:	0159      	lsls	r1, r3, #5
 8001b20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b24:	0150      	lsls	r0, r2, #5
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	ebb2 080a 	subs.w	r8, r2, sl
 8001b2e:	eb63 090b 	sbc.w	r9, r3, fp
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	f04f 0300 	mov.w	r3, #0
 8001b3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001b3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001b42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001b46:	ebb2 0408 	subs.w	r4, r2, r8
 8001b4a:	eb63 0509 	sbc.w	r5, r3, r9
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	00eb      	lsls	r3, r5, #3
 8001b58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b5c:	00e2      	lsls	r2, r4, #3
 8001b5e:	4614      	mov	r4, r2
 8001b60:	461d      	mov	r5, r3
 8001b62:	eb14 030a 	adds.w	r3, r4, sl
 8001b66:	603b      	str	r3, [r7, #0]
 8001b68:	eb45 030b 	adc.w	r3, r5, fp
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	f04f 0300 	mov.w	r3, #0
 8001b76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b7a:	4629      	mov	r1, r5
 8001b7c:	028b      	lsls	r3, r1, #10
 8001b7e:	4621      	mov	r1, r4
 8001b80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b84:	4621      	mov	r1, r4
 8001b86:	028a      	lsls	r2, r1, #10
 8001b88:	4610      	mov	r0, r2
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b8e:	2200      	movs	r2, #0
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	60fa      	str	r2, [r7, #12]
 8001b94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b98:	f7fe fb4e 	bl	8000238 <__aeabi_uldivmod>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	0c1b      	lsrs	r3, r3, #16
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	3301      	adds	r3, #1
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001bb4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bbc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001bbe:	e002      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bc0:	4b05      	ldr	r3, [pc, #20]	@ (8001bd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3740      	adds	r7, #64	@ 0x40
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	00f42400 	.word	0x00f42400
 8001bdc:	017d7840 	.word	0x017d7840

08001be0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001be4:	4b03      	ldr	r3, [pc, #12]	@ (8001bf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20000000 	.word	0x20000000

08001bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bfc:	f7ff fff0 	bl	8001be0 <HAL_RCC_GetHCLKFreq>
 8001c00:	4602      	mov	r2, r0
 8001c02:	4b05      	ldr	r3, [pc, #20]	@ (8001c18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	0a9b      	lsrs	r3, r3, #10
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	4903      	ldr	r1, [pc, #12]	@ (8001c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c0e:	5ccb      	ldrb	r3, [r1, r3]
 8001c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	08003b84 	.word	0x08003b84

08001c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c24:	f7ff ffdc 	bl	8001be0 <HAL_RCC_GetHCLKFreq>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	4b05      	ldr	r3, [pc, #20]	@ (8001c40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	0b5b      	lsrs	r3, r3, #13
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	4903      	ldr	r1, [pc, #12]	@ (8001c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c36:	5ccb      	ldrb	r3, [r1, r3]
 8001c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40023800 	.word	0x40023800
 8001c44:	08003b84 	.word	0x08003b84

08001c48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d012      	beq.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001c70:	4b69      	ldr	r3, [pc, #420]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	4a68      	ldr	r2, [pc, #416]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c76:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001c7a:	6093      	str	r3, [r2, #8]
 8001c7c:	4b66      	ldr	r3, [pc, #408]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c84:	4964      	ldr	r1, [pc, #400]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001c92:	2301      	movs	r3, #1
 8001c94:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d017      	beq.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ca2:	4b5d      	ldr	r3, [pc, #372]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ca8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cb0:	4959      	ldr	r1, [pc, #356]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001cc0:	d101      	bne.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d017      	beq.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001cde:	4b4e      	ldr	r3, [pc, #312]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ce4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cec:	494a      	ldr	r1, [pc, #296]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cfc:	d101      	bne.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0320 	and.w	r3, r3, #32
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 808b 	beq.w	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d2c:	4b3a      	ldr	r3, [pc, #232]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d30:	4a39      	ldr	r2, [pc, #228]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d36:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d38:	4b37      	ldr	r3, [pc, #220]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d44:	4b35      	ldr	r3, [pc, #212]	@ (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a34      	ldr	r2, [pc, #208]	@ (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d50:	f7fe fef8 	bl	8000b44 <HAL_GetTick>
 8001d54:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d58:	f7fe fef4 	bl	8000b44 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b64      	cmp	r3, #100	@ 0x64
 8001d64:	d901      	bls.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e38f      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d6a:	4b2c      	ldr	r3, [pc, #176]	@ (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d76:	4b28      	ldr	r3, [pc, #160]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d7e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d035      	beq.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d02e      	beq.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d94:	4b20      	ldr	r3, [pc, #128]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d9c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001da2:	4a1d      	ldr	r2, [pc, #116]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001da8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001daa:	4b1b      	ldr	r3, [pc, #108]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dae:	4a1a      	ldr	r2, [pc, #104]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001db0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001db4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001db6:	4a18      	ldr	r2, [pc, #96]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001dbc:	4b16      	ldr	r3, [pc, #88]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d114      	bne.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc8:	f7fe febc 	bl	8000b44 <HAL_GetTick>
 8001dcc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dce:	e00a      	b.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dd0:	f7fe feb8 	bl	8000b44 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e351      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de6:	4b0c      	ldr	r3, [pc, #48]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0ee      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001dfe:	d111      	bne.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001e00:	4b05      	ldr	r3, [pc, #20]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e0c:	4b04      	ldr	r3, [pc, #16]	@ (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001e0e:	400b      	ands	r3, r1
 8001e10:	4901      	ldr	r1, [pc, #4]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	608b      	str	r3, [r1, #8]
 8001e16:	e00b      	b.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40007000 	.word	0x40007000
 8001e20:	0ffffcff 	.word	0x0ffffcff
 8001e24:	4bac      	ldr	r3, [pc, #688]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	4aab      	ldr	r2, [pc, #684]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e2a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001e2e:	6093      	str	r3, [r2, #8]
 8001e30:	4ba9      	ldr	r3, [pc, #676]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e32:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e3c:	49a6      	ldr	r1, [pc, #664]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0310 	and.w	r3, r3, #16
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d010      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e4e:	4ba2      	ldr	r3, [pc, #648]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e54:	4aa0      	ldr	r2, [pc, #640]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e5a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e5e:	4b9e      	ldr	r3, [pc, #632]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e60:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e68:	499b      	ldr	r1, [pc, #620]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00a      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e7c:	4b96      	ldr	r3, [pc, #600]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e82:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e8a:	4993      	ldr	r1, [pc, #588]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00a      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e9e:	4b8e      	ldr	r3, [pc, #568]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ea4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001eac:	498a      	ldr	r1, [pc, #552]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00a      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ec0:	4b85      	ldr	r3, [pc, #532]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ec6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ece:	4982      	ldr	r1, [pc, #520]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00a      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001ee2:	4b7d      	ldr	r3, [pc, #500]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ef0:	4979      	ldr	r1, [pc, #484]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00a      	beq.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f04:	4b74      	ldr	r3, [pc, #464]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f0a:	f023 0203 	bic.w	r2, r3, #3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f12:	4971      	ldr	r1, [pc, #452]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00a      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f26:	4b6c      	ldr	r3, [pc, #432]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f2c:	f023 020c 	bic.w	r2, r3, #12
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f34:	4968      	ldr	r1, [pc, #416]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00a      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f48:	4b63      	ldr	r3, [pc, #396]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f4e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f56:	4960      	ldr	r1, [pc, #384]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00a      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f6a:	4b5b      	ldr	r3, [pc, #364]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f70:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f78:	4957      	ldr	r1, [pc, #348]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00a      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f8c:	4b52      	ldr	r3, [pc, #328]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f92:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f9a:	494f      	ldr	r1, [pc, #316]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00a      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001fae:	4b4a      	ldr	r3, [pc, #296]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fb4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fbc:	4946      	ldr	r1, [pc, #280]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00a      	beq.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001fd0:	4b41      	ldr	r3, [pc, #260]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fd6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fde:	493e      	ldr	r1, [pc, #248]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00a      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001ff2:	4b39      	ldr	r3, [pc, #228]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002000:	4935      	ldr	r1, [pc, #212]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002002:	4313      	orrs	r3, r2
 8002004:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00a      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002014:	4b30      	ldr	r3, [pc, #192]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800201a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002022:	492d      	ldr	r1, [pc, #180]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002024:	4313      	orrs	r3, r2
 8002026:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d011      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002036:	4b28      	ldr	r3, [pc, #160]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800203c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002044:	4924      	ldr	r1, [pc, #144]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002046:	4313      	orrs	r3, r2
 8002048:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002050:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002054:	d101      	bne.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002056:	2301      	movs	r3, #1
 8002058:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002066:	2301      	movs	r3, #1
 8002068:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00a      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002076:	4b18      	ldr	r3, [pc, #96]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800207c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002084:	4914      	ldr	r1, [pc, #80]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002086:	4313      	orrs	r3, r2
 8002088:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00b      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002098:	4b0f      	ldr	r3, [pc, #60]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800209a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800209e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020a8:	490b      	ldr	r1, [pc, #44]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00f      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80020bc:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020cc:	4902      	ldr	r1, [pc, #8]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80020d4:	e002      	b.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x494>
 80020d6:	bf00      	nop
 80020d8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00b      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80020e8:	4b8a      	ldr	r3, [pc, #552]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020ee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f8:	4986      	ldr	r1, [pc, #536]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00b      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800210c:	4b81      	ldr	r3, [pc, #516]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800210e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002112:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800211c:	497d      	ldr	r1, [pc, #500]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800211e:	4313      	orrs	r3, r2
 8002120:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d006      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 80d6 	beq.w	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002138:	4b76      	ldr	r3, [pc, #472]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a75      	ldr	r2, [pc, #468]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800213e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002142:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002144:	f7fe fcfe 	bl	8000b44 <HAL_GetTick>
 8002148:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800214a:	e008      	b.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800214c:	f7fe fcfa 	bl	8000b44 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b64      	cmp	r3, #100	@ 0x64
 8002158:	d901      	bls.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e195      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800215e:	4b6d      	ldr	r3, [pc, #436]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f0      	bne.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d021      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800217a:	2b00      	cmp	r3, #0
 800217c:	d11d      	bne.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800217e:	4b65      	ldr	r3, [pc, #404]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002180:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002184:	0c1b      	lsrs	r3, r3, #16
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800218c:	4b61      	ldr	r3, [pc, #388]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800218e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002192:	0e1b      	lsrs	r3, r3, #24
 8002194:	f003 030f 	and.w	r3, r3, #15
 8002198:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	019a      	lsls	r2, r3, #6
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	041b      	lsls	r3, r3, #16
 80021a4:	431a      	orrs	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	061b      	lsls	r3, r3, #24
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	071b      	lsls	r3, r3, #28
 80021b2:	4958      	ldr	r1, [pc, #352]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d004      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80021ce:	d00a      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d02e      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021e4:	d129      	bne.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80021e6:	4b4b      	ldr	r3, [pc, #300]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021ec:	0c1b      	lsrs	r3, r3, #16
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80021f4:	4b47      	ldr	r3, [pc, #284]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021fa:	0f1b      	lsrs	r3, r3, #28
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	019a      	lsls	r2, r3, #6
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	041b      	lsls	r3, r3, #16
 800220c:	431a      	orrs	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	061b      	lsls	r3, r3, #24
 8002214:	431a      	orrs	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	071b      	lsls	r3, r3, #28
 800221a:	493e      	ldr	r1, [pc, #248]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800221c:	4313      	orrs	r3, r2
 800221e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002222:	4b3c      	ldr	r3, [pc, #240]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002224:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002228:	f023 021f 	bic.w	r2, r3, #31
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002230:	3b01      	subs	r3, #1
 8002232:	4938      	ldr	r1, [pc, #224]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002234:	4313      	orrs	r3, r2
 8002236:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d01d      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002246:	4b33      	ldr	r3, [pc, #204]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002248:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800224c:	0e1b      	lsrs	r3, r3, #24
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002254:	4b2f      	ldr	r3, [pc, #188]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002256:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800225a:	0f1b      	lsrs	r3, r3, #28
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	019a      	lsls	r2, r3, #6
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	041b      	lsls	r3, r3, #16
 800226e:	431a      	orrs	r2, r3
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	061b      	lsls	r3, r3, #24
 8002274:	431a      	orrs	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	071b      	lsls	r3, r3, #28
 800227a:	4926      	ldr	r1, [pc, #152]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d011      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	019a      	lsls	r2, r3, #6
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	041b      	lsls	r3, r3, #16
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	061b      	lsls	r3, r3, #24
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	071b      	lsls	r3, r3, #28
 80022aa:	491a      	ldr	r1, [pc, #104]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80022b2:	4b18      	ldr	r3, [pc, #96]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a17      	ldr	r2, [pc, #92]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80022bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022be:	f7fe fc41 	bl	8000b44 <HAL_GetTick>
 80022c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80022c4:	e008      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80022c6:	f7fe fc3d 	bl	8000b44 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b64      	cmp	r3, #100	@ 0x64
 80022d2:	d901      	bls.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e0d8      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80022d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0f0      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	f040 80ce 	bne.w	8002488 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80022ec:	4b09      	ldr	r3, [pc, #36]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a08      	ldr	r2, [pc, #32]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022f8:	f7fe fc24 	bl	8000b44 <HAL_GetTick>
 80022fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80022fe:	e00b      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002300:	f7fe fc20 	bl	8000b44 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b64      	cmp	r3, #100	@ 0x64
 800230c:	d904      	bls.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e0bb      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002312:	bf00      	nop
 8002314:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002318:	4b5e      	ldr	r3, [pc, #376]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002320:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002324:	d0ec      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002336:	2b00      	cmp	r3, #0
 8002338:	d009      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002342:	2b00      	cmp	r3, #0
 8002344:	d02e      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234a:	2b00      	cmp	r3, #0
 800234c:	d12a      	bne.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800234e:	4b51      	ldr	r3, [pc, #324]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002354:	0c1b      	lsrs	r3, r3, #16
 8002356:	f003 0303 	and.w	r3, r3, #3
 800235a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800235c:	4b4d      	ldr	r3, [pc, #308]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800235e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002362:	0f1b      	lsrs	r3, r3, #28
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	019a      	lsls	r2, r3, #6
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	041b      	lsls	r3, r3, #16
 8002374:	431a      	orrs	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	061b      	lsls	r3, r3, #24
 800237c:	431a      	orrs	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	071b      	lsls	r3, r3, #28
 8002382:	4944      	ldr	r1, [pc, #272]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002384:	4313      	orrs	r3, r2
 8002386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800238a:	4b42      	ldr	r3, [pc, #264]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800238c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002390:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002398:	3b01      	subs	r3, #1
 800239a:	021b      	lsls	r3, r3, #8
 800239c:	493d      	ldr	r1, [pc, #244]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d022      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023b8:	d11d      	bne.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80023ba:	4b36      	ldr	r3, [pc, #216]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023c0:	0e1b      	lsrs	r3, r3, #24
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80023c8:	4b32      	ldr	r3, [pc, #200]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ce:	0f1b      	lsrs	r3, r3, #28
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	019a      	lsls	r2, r3, #6
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	041b      	lsls	r3, r3, #16
 80023e2:	431a      	orrs	r2, r3
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	061b      	lsls	r3, r3, #24
 80023e8:	431a      	orrs	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	071b      	lsls	r3, r3, #28
 80023ee:	4929      	ldr	r1, [pc, #164]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d028      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002402:	4b24      	ldr	r3, [pc, #144]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002408:	0e1b      	lsrs	r3, r3, #24
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002410:	4b20      	ldr	r3, [pc, #128]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002416:	0c1b      	lsrs	r3, r3, #16
 8002418:	f003 0303 	and.w	r3, r3, #3
 800241c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	019a      	lsls	r2, r3, #6
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	041b      	lsls	r3, r3, #16
 8002428:	431a      	orrs	r2, r3
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	061b      	lsls	r3, r3, #24
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	071b      	lsls	r3, r3, #28
 8002436:	4917      	ldr	r1, [pc, #92]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002438:	4313      	orrs	r3, r2
 800243a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800243e:	4b15      	ldr	r3, [pc, #84]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002440:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002444:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800244c:	4911      	ldr	r1, [pc, #68]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800244e:	4313      	orrs	r3, r2
 8002450:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002454:	4b0f      	ldr	r3, [pc, #60]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a0e      	ldr	r2, [pc, #56]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800245a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800245e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002460:	f7fe fb70 	bl	8000b44 <HAL_GetTick>
 8002464:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002466:	e008      	b.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002468:	f7fe fb6c 	bl	8000b44 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b64      	cmp	r3, #100	@ 0x64
 8002474:	d901      	bls.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e007      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800247a:	4b06      	ldr	r3, [pc, #24]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002482:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002486:	d1ef      	bne.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3720      	adds	r7, #32
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40023800 	.word	0x40023800

08002498 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e040      	b.n	800252c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d106      	bne.n	80024c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7fe fa16 	bl	80008ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2224      	movs	r2, #36	@ 0x24
 80024c4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0201 	bic.w	r2, r2, #1
 80024d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d002      	beq.n	80024e4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 fdfc 	bl	80030dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 fb95 	bl	8002c14 <UART_SetConfig>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e01b      	b.n	800252c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002502:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002512:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0201 	orr.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 fe7b 	bl	8003220 <UART_CheckIdleState>
 800252a:	4603      	mov	r3, r0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08a      	sub	sp, #40	@ 0x28
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	4613      	mov	r3, r2
 8002540:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002548:	2b20      	cmp	r3, #32
 800254a:	d132      	bne.n	80025b2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <HAL_UART_Receive_IT+0x24>
 8002552:	88fb      	ldrh	r3, [r7, #6]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e02b      	b.n	80025b4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d018      	beq.n	80025a2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	e853 3f00 	ldrex	r3, [r3]
 800257c:	613b      	str	r3, [r7, #16]
   return(result);
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002584:	627b      	str	r3, [r7, #36]	@ 0x24
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258e:	623b      	str	r3, [r7, #32]
 8002590:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002592:	69f9      	ldr	r1, [r7, #28]
 8002594:	6a3a      	ldr	r2, [r7, #32]
 8002596:	e841 2300 	strex	r3, r2, [r1]
 800259a:	61bb      	str	r3, [r7, #24]
   return(result);
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1e6      	bne.n	8002570 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80025a2:	88fb      	ldrh	r3, [r7, #6]
 80025a4:	461a      	mov	r2, r3
 80025a6:	68b9      	ldr	r1, [r7, #8]
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 ff4f 	bl	800344c <UART_Start_Receive_IT>
 80025ae:	4603      	mov	r3, r0
 80025b0:	e000      	b.n	80025b4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80025b2:	2302      	movs	r3, #2
  }
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3728      	adds	r7, #40	@ 0x28
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b0ba      	sub	sp, #232	@ 0xe8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80025e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80025e6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80025ea:	4013      	ands	r3, r2
 80025ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80025f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d115      	bne.n	8002624 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80025f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025fc:	f003 0320 	and.w	r3, r3, #32
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00f      	beq.n	8002624 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002608:	f003 0320 	and.w	r3, r3, #32
 800260c:	2b00      	cmp	r3, #0
 800260e:	d009      	beq.n	8002624 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 82c6 	beq.w	8002ba6 <HAL_UART_IRQHandler+0x5ea>
      {
        huart->RxISR(huart);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	4798      	blx	r3
      }
      return;
 8002622:	e2c0      	b.n	8002ba6 <HAL_UART_IRQHandler+0x5ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002624:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 8117 	beq.w	800285c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800262e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d106      	bne.n	8002648 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800263a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800263e:	4b85      	ldr	r3, [pc, #532]	@ (8002854 <HAL_UART_IRQHandler+0x298>)
 8002640:	4013      	ands	r3, r2
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 810a 	beq.w	800285c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b00      	cmp	r3, #0
 8002652:	d011      	beq.n	8002678 <HAL_UART_IRQHandler+0xbc>
 8002654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00b      	beq.n	8002678 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2201      	movs	r2, #1
 8002666:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800266e:	f043 0201 	orr.w	r2, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d011      	beq.n	80026a8 <HAL_UART_IRQHandler+0xec>
 8002684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00b      	beq.n	80026a8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2202      	movs	r2, #2
 8002696:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800269e:	f043 0204 	orr.w	r2, r3, #4
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80026a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d011      	beq.n	80026d8 <HAL_UART_IRQHandler+0x11c>
 80026b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00b      	beq.n	80026d8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2204      	movs	r2, #4
 80026c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026ce:	f043 0202 	orr.w	r2, r3, #2
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80026d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026dc:	f003 0308 	and.w	r3, r3, #8
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d017      	beq.n	8002714 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80026e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026e8:	f003 0320 	and.w	r3, r3, #32
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d105      	bne.n	80026fc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80026f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80026f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00b      	beq.n	8002714 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2208      	movs	r2, #8
 8002702:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800270a:	f043 0208 	orr.w	r2, r3, #8
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002718:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800271c:	2b00      	cmp	r3, #0
 800271e:	d012      	beq.n	8002746 <HAL_UART_IRQHandler+0x18a>
 8002720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002724:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00c      	beq.n	8002746 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002734:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800273c:	f043 0220 	orr.w	r2, r3, #32
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 822c 	beq.w	8002baa <HAL_UART_IRQHandler+0x5ee>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002756:	f003 0320 	and.w	r3, r3, #32
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00d      	beq.n	800277a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800275e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002762:	f003 0320 	and.w	r3, r3, #32
 8002766:	2b00      	cmp	r3, #0
 8002768:	d007      	beq.n	800277a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002780:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800278e:	2b40      	cmp	r3, #64	@ 0x40
 8002790:	d005      	beq.n	800279e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002792:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002796:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800279a:	2b00      	cmp	r3, #0
 800279c:	d04f      	beq.n	800283e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 ff1a 	bl	80035d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ae:	2b40      	cmp	r3, #64	@ 0x40
 80027b0:	d141      	bne.n	8002836 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	3308      	adds	r3, #8
 80027b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80027c0:	e853 3f00 	ldrex	r3, [r3]
 80027c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80027c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80027cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	3308      	adds	r3, #8
 80027da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80027de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80027e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80027ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80027ee:	e841 2300 	strex	r3, r2, [r1]
 80027f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80027f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1d9      	bne.n	80027b2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002802:	2b00      	cmp	r3, #0
 8002804:	d013      	beq.n	800282e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800280a:	4a13      	ldr	r2, [pc, #76]	@ (8002858 <HAL_UART_IRQHandler+0x29c>)
 800280c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002812:	4618      	mov	r0, r3
 8002814:	f7fe fb9c 	bl	8000f50 <HAL_DMA_Abort_IT>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d017      	beq.n	800284e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002822:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002828:	4610      	mov	r0, r2
 800282a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800282c:	e00f      	b.n	800284e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f9d0 	bl	8002bd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002834:	e00b      	b.n	800284e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f9cc 	bl	8002bd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800283c:	e007      	b.n	800284e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f9c8 	bl	8002bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800284c:	e1ad      	b.n	8002baa <HAL_UART_IRQHandler+0x5ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800284e:	bf00      	nop
    return;
 8002850:	e1ab      	b.n	8002baa <HAL_UART_IRQHandler+0x5ee>
 8002852:	bf00      	nop
 8002854:	04000120 	.word	0x04000120
 8002858:	080036a1 	.word	0x080036a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002860:	2b01      	cmp	r3, #1
 8002862:	f040 8166 	bne.w	8002b32 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800286a:	f003 0310 	and.w	r3, r3, #16
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 815f 	beq.w	8002b32 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002878:	f003 0310 	and.w	r3, r3, #16
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 8158 	beq.w	8002b32 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2210      	movs	r2, #16
 8002888:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002894:	2b40      	cmp	r3, #64	@ 0x40
 8002896:	f040 80d0 	bne.w	8002a3a <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80028a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 80ab 	beq.w	8002a06 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80028b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80028ba:	429a      	cmp	r2, r3
 80028bc:	f080 80a3 	bcs.w	8002a06 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80028c6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028d4:	f000 8086 	beq.w	80029e4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80028e4:	e853 3f00 	ldrex	r3, [r3]
 80028e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80028ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	461a      	mov	r2, r3
 80028fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002902:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002906:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800290a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800290e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002912:	e841 2300 	strex	r3, r2, [r1]
 8002916:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800291a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1da      	bne.n	80028d8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	3308      	adds	r3, #8
 8002928:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800292a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800292c:	e853 3f00 	ldrex	r3, [r3]
 8002930:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002932:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002934:	f023 0301 	bic.w	r3, r3, #1
 8002938:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	3308      	adds	r3, #8
 8002942:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002946:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800294a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800294c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800294e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002952:	e841 2300 	strex	r3, r2, [r1]
 8002956:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002958:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1e1      	bne.n	8002922 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	3308      	adds	r3, #8
 8002964:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002966:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002968:	e853 3f00 	ldrex	r3, [r3]
 800296c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800296e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002970:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002974:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	3308      	adds	r3, #8
 800297e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002982:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002984:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002986:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002988:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800298a:	e841 2300 	strex	r3, r2, [r1]
 800298e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002990:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1e3      	bne.n	800295e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2220      	movs	r2, #32
 800299a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029ac:	e853 3f00 	ldrex	r3, [r3]
 80029b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80029b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029b4:	f023 0310 	bic.w	r3, r3, #16
 80029b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	461a      	mov	r2, r3
 80029c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80029c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80029cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80029ce:	e841 2300 	strex	r3, r2, [r1]
 80029d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80029d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1e4      	bne.n	80029a4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fe fa46 	bl	8000e70 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	4619      	mov	r1, r3
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f8f2 	bl	8002be8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002a04:	e0d3      	b.n	8002bae <HAL_UART_IRQHandler+0x5f2>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002a0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a10:	429a      	cmp	r2, r3
 8002a12:	f040 80cc 	bne.w	8002bae <HAL_UART_IRQHandler+0x5f2>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a1a:	69db      	ldr	r3, [r3, #28]
 8002a1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a20:	f040 80c5 	bne.w	8002bae <HAL_UART_IRQHandler+0x5f2>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002a30:	4619      	mov	r1, r3
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f8d8 	bl	8002be8 <HAL_UARTEx_RxEventCallback>
      return;
 8002a38:	e0b9      	b.n	8002bae <HAL_UART_IRQHandler+0x5f2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 80ab 	beq.w	8002bb2 <HAL_UART_IRQHandler+0x5f6>
          && (nb_rx_data > 0U))
 8002a5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 80a6 	beq.w	8002bb2 <HAL_UART_IRQHandler+0x5f6>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a6e:	e853 3f00 	ldrex	r3, [r3]
 8002a72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	461a      	mov	r2, r3
 8002a84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002a88:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002a8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a90:	e841 2300 	strex	r3, r2, [r1]
 8002a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002a96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1e4      	bne.n	8002a66 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	3308      	adds	r3, #8
 8002aa2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa6:	e853 3f00 	ldrex	r3, [r3]
 8002aaa:	623b      	str	r3, [r7, #32]
   return(result);
 8002aac:	6a3b      	ldr	r3, [r7, #32]
 8002aae:	f023 0301 	bic.w	r3, r3, #1
 8002ab2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	3308      	adds	r3, #8
 8002abc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002ac0:	633a      	str	r2, [r7, #48]	@ 0x30
 8002ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ac6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ac8:	e841 2300 	strex	r3, r2, [r1]
 8002acc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1e3      	bne.n	8002a9c <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	e853 3f00 	ldrex	r3, [r3]
 8002af4:	60fb      	str	r3, [r7, #12]
   return(result);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f023 0310 	bic.w	r3, r3, #16
 8002afc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	461a      	mov	r2, r3
 8002b06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b0a:	61fb      	str	r3, [r7, #28]
 8002b0c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0e:	69b9      	ldr	r1, [r7, #24]
 8002b10:	69fa      	ldr	r2, [r7, #28]
 8002b12:	e841 2300 	strex	r3, r2, [r1]
 8002b16:	617b      	str	r3, [r7, #20]
   return(result);
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1e4      	bne.n	8002ae8 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2202      	movs	r2, #2
 8002b22:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002b28:	4619      	mov	r1, r3
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f85c 	bl	8002be8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b30:	e03f      	b.n	8002bb2 <HAL_UART_IRQHandler+0x5f6>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00e      	beq.n	8002b5c <HAL_UART_IRQHandler+0x5a0>
 8002b3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d008      	beq.n	8002b5c <HAL_UART_IRQHandler+0x5a0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002b52:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f853 	bl	8002c00 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002b5a:	e02d      	b.n	8002bb8 <HAL_UART_IRQHandler+0x5fc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00e      	beq.n	8002b86 <HAL_UART_IRQHandler+0x5ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d008      	beq.n	8002b86 <HAL_UART_IRQHandler+0x5ca>
  {
    if (huart->TxISR != NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d01c      	beq.n	8002bb6 <HAL_UART_IRQHandler+0x5fa>
    {
      huart->TxISR(huart);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	4798      	blx	r3
    }
    return;
 8002b84:	e017      	b.n	8002bb6 <HAL_UART_IRQHandler+0x5fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d012      	beq.n	8002bb8 <HAL_UART_IRQHandler+0x5fc>
 8002b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00c      	beq.n	8002bb8 <HAL_UART_IRQHandler+0x5fc>
  {
    UART_EndTransmit_IT(huart);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 fd90 	bl	80036c4 <UART_EndTransmit_IT>
    return;
 8002ba4:	e008      	b.n	8002bb8 <HAL_UART_IRQHandler+0x5fc>
      return;
 8002ba6:	bf00      	nop
 8002ba8:	e006      	b.n	8002bb8 <HAL_UART_IRQHandler+0x5fc>
    return;
 8002baa:	bf00      	nop
 8002bac:	e004      	b.n	8002bb8 <HAL_UART_IRQHandler+0x5fc>
      return;
 8002bae:	bf00      	nop
 8002bb0:	e002      	b.n	8002bb8 <HAL_UART_IRQHandler+0x5fc>
      return;
 8002bb2:	bf00      	nop
 8002bb4:	e000      	b.n	8002bb8 <HAL_UART_IRQHandler+0x5fc>
    return;
 8002bb6:	bf00      	nop
  }

}
 8002bb8:	37e8      	adds	r7, #232	@ 0xe8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop

08002bc0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	4ba6      	ldr	r3, [pc, #664]	@ (8002ed8 <UART_SetConfig+0x2c4>)
 8002c40:	4013      	ands	r3, r2
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6812      	ldr	r2, [r2, #0]
 8002c46:	6979      	ldr	r1, [r7, #20]
 8002c48:	430b      	orrs	r3, r1
 8002c4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68da      	ldr	r2, [r3, #12]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a94      	ldr	r2, [pc, #592]	@ (8002edc <UART_SetConfig+0x2c8>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d120      	bne.n	8002cd2 <UART_SetConfig+0xbe>
 8002c90:	4b93      	ldr	r3, [pc, #588]	@ (8002ee0 <UART_SetConfig+0x2cc>)
 8002c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	d816      	bhi.n	8002ccc <UART_SetConfig+0xb8>
 8002c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8002ca4 <UART_SetConfig+0x90>)
 8002ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca4:	08002cb5 	.word	0x08002cb5
 8002ca8:	08002cc1 	.word	0x08002cc1
 8002cac:	08002cbb 	.word	0x08002cbb
 8002cb0:	08002cc7 	.word	0x08002cc7
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	77fb      	strb	r3, [r7, #31]
 8002cb8:	e150      	b.n	8002f5c <UART_SetConfig+0x348>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	77fb      	strb	r3, [r7, #31]
 8002cbe:	e14d      	b.n	8002f5c <UART_SetConfig+0x348>
 8002cc0:	2304      	movs	r3, #4
 8002cc2:	77fb      	strb	r3, [r7, #31]
 8002cc4:	e14a      	b.n	8002f5c <UART_SetConfig+0x348>
 8002cc6:	2308      	movs	r3, #8
 8002cc8:	77fb      	strb	r3, [r7, #31]
 8002cca:	e147      	b.n	8002f5c <UART_SetConfig+0x348>
 8002ccc:	2310      	movs	r3, #16
 8002cce:	77fb      	strb	r3, [r7, #31]
 8002cd0:	e144      	b.n	8002f5c <UART_SetConfig+0x348>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a83      	ldr	r2, [pc, #524]	@ (8002ee4 <UART_SetConfig+0x2d0>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d132      	bne.n	8002d42 <UART_SetConfig+0x12e>
 8002cdc:	4b80      	ldr	r3, [pc, #512]	@ (8002ee0 <UART_SetConfig+0x2cc>)
 8002cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ce2:	f003 030c 	and.w	r3, r3, #12
 8002ce6:	2b0c      	cmp	r3, #12
 8002ce8:	d828      	bhi.n	8002d3c <UART_SetConfig+0x128>
 8002cea:	a201      	add	r2, pc, #4	@ (adr r2, 8002cf0 <UART_SetConfig+0xdc>)
 8002cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf0:	08002d25 	.word	0x08002d25
 8002cf4:	08002d3d 	.word	0x08002d3d
 8002cf8:	08002d3d 	.word	0x08002d3d
 8002cfc:	08002d3d 	.word	0x08002d3d
 8002d00:	08002d31 	.word	0x08002d31
 8002d04:	08002d3d 	.word	0x08002d3d
 8002d08:	08002d3d 	.word	0x08002d3d
 8002d0c:	08002d3d 	.word	0x08002d3d
 8002d10:	08002d2b 	.word	0x08002d2b
 8002d14:	08002d3d 	.word	0x08002d3d
 8002d18:	08002d3d 	.word	0x08002d3d
 8002d1c:	08002d3d 	.word	0x08002d3d
 8002d20:	08002d37 	.word	0x08002d37
 8002d24:	2300      	movs	r3, #0
 8002d26:	77fb      	strb	r3, [r7, #31]
 8002d28:	e118      	b.n	8002f5c <UART_SetConfig+0x348>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	77fb      	strb	r3, [r7, #31]
 8002d2e:	e115      	b.n	8002f5c <UART_SetConfig+0x348>
 8002d30:	2304      	movs	r3, #4
 8002d32:	77fb      	strb	r3, [r7, #31]
 8002d34:	e112      	b.n	8002f5c <UART_SetConfig+0x348>
 8002d36:	2308      	movs	r3, #8
 8002d38:	77fb      	strb	r3, [r7, #31]
 8002d3a:	e10f      	b.n	8002f5c <UART_SetConfig+0x348>
 8002d3c:	2310      	movs	r3, #16
 8002d3e:	77fb      	strb	r3, [r7, #31]
 8002d40:	e10c      	b.n	8002f5c <UART_SetConfig+0x348>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a68      	ldr	r2, [pc, #416]	@ (8002ee8 <UART_SetConfig+0x2d4>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d120      	bne.n	8002d8e <UART_SetConfig+0x17a>
 8002d4c:	4b64      	ldr	r3, [pc, #400]	@ (8002ee0 <UART_SetConfig+0x2cc>)
 8002d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d52:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002d56:	2b30      	cmp	r3, #48	@ 0x30
 8002d58:	d013      	beq.n	8002d82 <UART_SetConfig+0x16e>
 8002d5a:	2b30      	cmp	r3, #48	@ 0x30
 8002d5c:	d814      	bhi.n	8002d88 <UART_SetConfig+0x174>
 8002d5e:	2b20      	cmp	r3, #32
 8002d60:	d009      	beq.n	8002d76 <UART_SetConfig+0x162>
 8002d62:	2b20      	cmp	r3, #32
 8002d64:	d810      	bhi.n	8002d88 <UART_SetConfig+0x174>
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d002      	beq.n	8002d70 <UART_SetConfig+0x15c>
 8002d6a:	2b10      	cmp	r3, #16
 8002d6c:	d006      	beq.n	8002d7c <UART_SetConfig+0x168>
 8002d6e:	e00b      	b.n	8002d88 <UART_SetConfig+0x174>
 8002d70:	2300      	movs	r3, #0
 8002d72:	77fb      	strb	r3, [r7, #31]
 8002d74:	e0f2      	b.n	8002f5c <UART_SetConfig+0x348>
 8002d76:	2302      	movs	r3, #2
 8002d78:	77fb      	strb	r3, [r7, #31]
 8002d7a:	e0ef      	b.n	8002f5c <UART_SetConfig+0x348>
 8002d7c:	2304      	movs	r3, #4
 8002d7e:	77fb      	strb	r3, [r7, #31]
 8002d80:	e0ec      	b.n	8002f5c <UART_SetConfig+0x348>
 8002d82:	2308      	movs	r3, #8
 8002d84:	77fb      	strb	r3, [r7, #31]
 8002d86:	e0e9      	b.n	8002f5c <UART_SetConfig+0x348>
 8002d88:	2310      	movs	r3, #16
 8002d8a:	77fb      	strb	r3, [r7, #31]
 8002d8c:	e0e6      	b.n	8002f5c <UART_SetConfig+0x348>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a56      	ldr	r2, [pc, #344]	@ (8002eec <UART_SetConfig+0x2d8>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d120      	bne.n	8002dda <UART_SetConfig+0x1c6>
 8002d98:	4b51      	ldr	r3, [pc, #324]	@ (8002ee0 <UART_SetConfig+0x2cc>)
 8002d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d9e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002da2:	2bc0      	cmp	r3, #192	@ 0xc0
 8002da4:	d013      	beq.n	8002dce <UART_SetConfig+0x1ba>
 8002da6:	2bc0      	cmp	r3, #192	@ 0xc0
 8002da8:	d814      	bhi.n	8002dd4 <UART_SetConfig+0x1c0>
 8002daa:	2b80      	cmp	r3, #128	@ 0x80
 8002dac:	d009      	beq.n	8002dc2 <UART_SetConfig+0x1ae>
 8002dae:	2b80      	cmp	r3, #128	@ 0x80
 8002db0:	d810      	bhi.n	8002dd4 <UART_SetConfig+0x1c0>
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <UART_SetConfig+0x1a8>
 8002db6:	2b40      	cmp	r3, #64	@ 0x40
 8002db8:	d006      	beq.n	8002dc8 <UART_SetConfig+0x1b4>
 8002dba:	e00b      	b.n	8002dd4 <UART_SetConfig+0x1c0>
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	77fb      	strb	r3, [r7, #31]
 8002dc0:	e0cc      	b.n	8002f5c <UART_SetConfig+0x348>
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	77fb      	strb	r3, [r7, #31]
 8002dc6:	e0c9      	b.n	8002f5c <UART_SetConfig+0x348>
 8002dc8:	2304      	movs	r3, #4
 8002dca:	77fb      	strb	r3, [r7, #31]
 8002dcc:	e0c6      	b.n	8002f5c <UART_SetConfig+0x348>
 8002dce:	2308      	movs	r3, #8
 8002dd0:	77fb      	strb	r3, [r7, #31]
 8002dd2:	e0c3      	b.n	8002f5c <UART_SetConfig+0x348>
 8002dd4:	2310      	movs	r3, #16
 8002dd6:	77fb      	strb	r3, [r7, #31]
 8002dd8:	e0c0      	b.n	8002f5c <UART_SetConfig+0x348>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a44      	ldr	r2, [pc, #272]	@ (8002ef0 <UART_SetConfig+0x2dc>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d125      	bne.n	8002e30 <UART_SetConfig+0x21c>
 8002de4:	4b3e      	ldr	r3, [pc, #248]	@ (8002ee0 <UART_SetConfig+0x2cc>)
 8002de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002df2:	d017      	beq.n	8002e24 <UART_SetConfig+0x210>
 8002df4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002df8:	d817      	bhi.n	8002e2a <UART_SetConfig+0x216>
 8002dfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dfe:	d00b      	beq.n	8002e18 <UART_SetConfig+0x204>
 8002e00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e04:	d811      	bhi.n	8002e2a <UART_SetConfig+0x216>
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <UART_SetConfig+0x1fe>
 8002e0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e0e:	d006      	beq.n	8002e1e <UART_SetConfig+0x20a>
 8002e10:	e00b      	b.n	8002e2a <UART_SetConfig+0x216>
 8002e12:	2300      	movs	r3, #0
 8002e14:	77fb      	strb	r3, [r7, #31]
 8002e16:	e0a1      	b.n	8002f5c <UART_SetConfig+0x348>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	77fb      	strb	r3, [r7, #31]
 8002e1c:	e09e      	b.n	8002f5c <UART_SetConfig+0x348>
 8002e1e:	2304      	movs	r3, #4
 8002e20:	77fb      	strb	r3, [r7, #31]
 8002e22:	e09b      	b.n	8002f5c <UART_SetConfig+0x348>
 8002e24:	2308      	movs	r3, #8
 8002e26:	77fb      	strb	r3, [r7, #31]
 8002e28:	e098      	b.n	8002f5c <UART_SetConfig+0x348>
 8002e2a:	2310      	movs	r3, #16
 8002e2c:	77fb      	strb	r3, [r7, #31]
 8002e2e:	e095      	b.n	8002f5c <UART_SetConfig+0x348>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a2f      	ldr	r2, [pc, #188]	@ (8002ef4 <UART_SetConfig+0x2e0>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d125      	bne.n	8002e86 <UART_SetConfig+0x272>
 8002e3a:	4b29      	ldr	r3, [pc, #164]	@ (8002ee0 <UART_SetConfig+0x2cc>)
 8002e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e40:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002e44:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002e48:	d017      	beq.n	8002e7a <UART_SetConfig+0x266>
 8002e4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002e4e:	d817      	bhi.n	8002e80 <UART_SetConfig+0x26c>
 8002e50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e54:	d00b      	beq.n	8002e6e <UART_SetConfig+0x25a>
 8002e56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e5a:	d811      	bhi.n	8002e80 <UART_SetConfig+0x26c>
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <UART_SetConfig+0x254>
 8002e60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e64:	d006      	beq.n	8002e74 <UART_SetConfig+0x260>
 8002e66:	e00b      	b.n	8002e80 <UART_SetConfig+0x26c>
 8002e68:	2301      	movs	r3, #1
 8002e6a:	77fb      	strb	r3, [r7, #31]
 8002e6c:	e076      	b.n	8002f5c <UART_SetConfig+0x348>
 8002e6e:	2302      	movs	r3, #2
 8002e70:	77fb      	strb	r3, [r7, #31]
 8002e72:	e073      	b.n	8002f5c <UART_SetConfig+0x348>
 8002e74:	2304      	movs	r3, #4
 8002e76:	77fb      	strb	r3, [r7, #31]
 8002e78:	e070      	b.n	8002f5c <UART_SetConfig+0x348>
 8002e7a:	2308      	movs	r3, #8
 8002e7c:	77fb      	strb	r3, [r7, #31]
 8002e7e:	e06d      	b.n	8002f5c <UART_SetConfig+0x348>
 8002e80:	2310      	movs	r3, #16
 8002e82:	77fb      	strb	r3, [r7, #31]
 8002e84:	e06a      	b.n	8002f5c <UART_SetConfig+0x348>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ef8 <UART_SetConfig+0x2e4>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d138      	bne.n	8002f02 <UART_SetConfig+0x2ee>
 8002e90:	4b13      	ldr	r3, [pc, #76]	@ (8002ee0 <UART_SetConfig+0x2cc>)
 8002e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e96:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002e9a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002e9e:	d017      	beq.n	8002ed0 <UART_SetConfig+0x2bc>
 8002ea0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002ea4:	d82a      	bhi.n	8002efc <UART_SetConfig+0x2e8>
 8002ea6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002eaa:	d00b      	beq.n	8002ec4 <UART_SetConfig+0x2b0>
 8002eac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002eb0:	d824      	bhi.n	8002efc <UART_SetConfig+0x2e8>
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <UART_SetConfig+0x2aa>
 8002eb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002eba:	d006      	beq.n	8002eca <UART_SetConfig+0x2b6>
 8002ebc:	e01e      	b.n	8002efc <UART_SetConfig+0x2e8>
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	77fb      	strb	r3, [r7, #31]
 8002ec2:	e04b      	b.n	8002f5c <UART_SetConfig+0x348>
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	77fb      	strb	r3, [r7, #31]
 8002ec8:	e048      	b.n	8002f5c <UART_SetConfig+0x348>
 8002eca:	2304      	movs	r3, #4
 8002ecc:	77fb      	strb	r3, [r7, #31]
 8002ece:	e045      	b.n	8002f5c <UART_SetConfig+0x348>
 8002ed0:	2308      	movs	r3, #8
 8002ed2:	77fb      	strb	r3, [r7, #31]
 8002ed4:	e042      	b.n	8002f5c <UART_SetConfig+0x348>
 8002ed6:	bf00      	nop
 8002ed8:	efff69f3 	.word	0xefff69f3
 8002edc:	40011000 	.word	0x40011000
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	40004400 	.word	0x40004400
 8002ee8:	40004800 	.word	0x40004800
 8002eec:	40004c00 	.word	0x40004c00
 8002ef0:	40005000 	.word	0x40005000
 8002ef4:	40011400 	.word	0x40011400
 8002ef8:	40007800 	.word	0x40007800
 8002efc:	2310      	movs	r3, #16
 8002efe:	77fb      	strb	r3, [r7, #31]
 8002f00:	e02c      	b.n	8002f5c <UART_SetConfig+0x348>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a72      	ldr	r2, [pc, #456]	@ (80030d0 <UART_SetConfig+0x4bc>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d125      	bne.n	8002f58 <UART_SetConfig+0x344>
 8002f0c:	4b71      	ldr	r3, [pc, #452]	@ (80030d4 <UART_SetConfig+0x4c0>)
 8002f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f12:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002f16:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002f1a:	d017      	beq.n	8002f4c <UART_SetConfig+0x338>
 8002f1c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002f20:	d817      	bhi.n	8002f52 <UART_SetConfig+0x33e>
 8002f22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f26:	d00b      	beq.n	8002f40 <UART_SetConfig+0x32c>
 8002f28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f2c:	d811      	bhi.n	8002f52 <UART_SetConfig+0x33e>
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <UART_SetConfig+0x326>
 8002f32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f36:	d006      	beq.n	8002f46 <UART_SetConfig+0x332>
 8002f38:	e00b      	b.n	8002f52 <UART_SetConfig+0x33e>
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	77fb      	strb	r3, [r7, #31]
 8002f3e:	e00d      	b.n	8002f5c <UART_SetConfig+0x348>
 8002f40:	2302      	movs	r3, #2
 8002f42:	77fb      	strb	r3, [r7, #31]
 8002f44:	e00a      	b.n	8002f5c <UART_SetConfig+0x348>
 8002f46:	2304      	movs	r3, #4
 8002f48:	77fb      	strb	r3, [r7, #31]
 8002f4a:	e007      	b.n	8002f5c <UART_SetConfig+0x348>
 8002f4c:	2308      	movs	r3, #8
 8002f4e:	77fb      	strb	r3, [r7, #31]
 8002f50:	e004      	b.n	8002f5c <UART_SetConfig+0x348>
 8002f52:	2310      	movs	r3, #16
 8002f54:	77fb      	strb	r3, [r7, #31]
 8002f56:	e001      	b.n	8002f5c <UART_SetConfig+0x348>
 8002f58:	2310      	movs	r3, #16
 8002f5a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f64:	d15b      	bne.n	800301e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002f66:	7ffb      	ldrb	r3, [r7, #31]
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	d828      	bhi.n	8002fbe <UART_SetConfig+0x3aa>
 8002f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f74 <UART_SetConfig+0x360>)
 8002f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f72:	bf00      	nop
 8002f74:	08002f99 	.word	0x08002f99
 8002f78:	08002fa1 	.word	0x08002fa1
 8002f7c:	08002fa9 	.word	0x08002fa9
 8002f80:	08002fbf 	.word	0x08002fbf
 8002f84:	08002faf 	.word	0x08002faf
 8002f88:	08002fbf 	.word	0x08002fbf
 8002f8c:	08002fbf 	.word	0x08002fbf
 8002f90:	08002fbf 	.word	0x08002fbf
 8002f94:	08002fb7 	.word	0x08002fb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f98:	f7fe fe2e 	bl	8001bf8 <HAL_RCC_GetPCLK1Freq>
 8002f9c:	61b8      	str	r0, [r7, #24]
        break;
 8002f9e:	e013      	b.n	8002fc8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fa0:	f7fe fe3e 	bl	8001c20 <HAL_RCC_GetPCLK2Freq>
 8002fa4:	61b8      	str	r0, [r7, #24]
        break;
 8002fa6:	e00f      	b.n	8002fc8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fa8:	4b4b      	ldr	r3, [pc, #300]	@ (80030d8 <UART_SetConfig+0x4c4>)
 8002faa:	61bb      	str	r3, [r7, #24]
        break;
 8002fac:	e00c      	b.n	8002fc8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fae:	f7fe fd51 	bl	8001a54 <HAL_RCC_GetSysClockFreq>
 8002fb2:	61b8      	str	r0, [r7, #24]
        break;
 8002fb4:	e008      	b.n	8002fc8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fba:	61bb      	str	r3, [r7, #24]
        break;
 8002fbc:	e004      	b.n	8002fc8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	77bb      	strb	r3, [r7, #30]
        break;
 8002fc6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d074      	beq.n	80030b8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	005a      	lsls	r2, r3, #1
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	085b      	lsrs	r3, r3, #1
 8002fd8:	441a      	add	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	2b0f      	cmp	r3, #15
 8002fe8:	d916      	bls.n	8003018 <UART_SetConfig+0x404>
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ff0:	d212      	bcs.n	8003018 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	f023 030f 	bic.w	r3, r3, #15
 8002ffa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	085b      	lsrs	r3, r3, #1
 8003000:	b29b      	uxth	r3, r3
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	b29a      	uxth	r2, r3
 8003008:	89fb      	ldrh	r3, [r7, #14]
 800300a:	4313      	orrs	r3, r2
 800300c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	89fa      	ldrh	r2, [r7, #14]
 8003014:	60da      	str	r2, [r3, #12]
 8003016:	e04f      	b.n	80030b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	77bb      	strb	r3, [r7, #30]
 800301c:	e04c      	b.n	80030b8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800301e:	7ffb      	ldrb	r3, [r7, #31]
 8003020:	2b08      	cmp	r3, #8
 8003022:	d828      	bhi.n	8003076 <UART_SetConfig+0x462>
 8003024:	a201      	add	r2, pc, #4	@ (adr r2, 800302c <UART_SetConfig+0x418>)
 8003026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800302a:	bf00      	nop
 800302c:	08003051 	.word	0x08003051
 8003030:	08003059 	.word	0x08003059
 8003034:	08003061 	.word	0x08003061
 8003038:	08003077 	.word	0x08003077
 800303c:	08003067 	.word	0x08003067
 8003040:	08003077 	.word	0x08003077
 8003044:	08003077 	.word	0x08003077
 8003048:	08003077 	.word	0x08003077
 800304c:	0800306f 	.word	0x0800306f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003050:	f7fe fdd2 	bl	8001bf8 <HAL_RCC_GetPCLK1Freq>
 8003054:	61b8      	str	r0, [r7, #24]
        break;
 8003056:	e013      	b.n	8003080 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003058:	f7fe fde2 	bl	8001c20 <HAL_RCC_GetPCLK2Freq>
 800305c:	61b8      	str	r0, [r7, #24]
        break;
 800305e:	e00f      	b.n	8003080 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003060:	4b1d      	ldr	r3, [pc, #116]	@ (80030d8 <UART_SetConfig+0x4c4>)
 8003062:	61bb      	str	r3, [r7, #24]
        break;
 8003064:	e00c      	b.n	8003080 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003066:	f7fe fcf5 	bl	8001a54 <HAL_RCC_GetSysClockFreq>
 800306a:	61b8      	str	r0, [r7, #24]
        break;
 800306c:	e008      	b.n	8003080 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800306e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003072:	61bb      	str	r3, [r7, #24]
        break;
 8003074:	e004      	b.n	8003080 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	77bb      	strb	r3, [r7, #30]
        break;
 800307e:	bf00      	nop
    }

    if (pclk != 0U)
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d018      	beq.n	80030b8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	085a      	lsrs	r2, r3, #1
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	441a      	add	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	fbb2 f3f3 	udiv	r3, r2, r3
 8003098:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	2b0f      	cmp	r3, #15
 800309e:	d909      	bls.n	80030b4 <UART_SetConfig+0x4a0>
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030a6:	d205      	bcs.n	80030b4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	60da      	str	r2, [r3, #12]
 80030b2:	e001      	b.n	80030b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80030c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3720      	adds	r7, #32
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40007c00 	.word	0x40007c00
 80030d4:	40023800 	.word	0x40023800
 80030d8:	00f42400 	.word	0x00f42400

080030dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e8:	f003 0308 	and.w	r3, r3, #8
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00a      	beq.n	8003106 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00a      	beq.n	8003128 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00a      	beq.n	800314a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314e:	f003 0304 	and.w	r3, r3, #4
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00a      	beq.n	800316c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003170:	f003 0310 	and.w	r3, r3, #16
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00a      	beq.n	800318e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003192:	f003 0320 	and.w	r3, r3, #32
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00a      	beq.n	80031b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d01a      	beq.n	80031f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031da:	d10a      	bne.n	80031f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00a      	beq.n	8003214 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	605a      	str	r2, [r3, #4]
  }
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b098      	sub	sp, #96	@ 0x60
 8003224:	af02      	add	r7, sp, #8
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003230:	f7fd fc88 	bl	8000b44 <HAL_GetTick>
 8003234:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	2b08      	cmp	r3, #8
 8003242:	d12e      	bne.n	80032a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003244:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800324c:	2200      	movs	r2, #0
 800324e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f88c 	bl	8003370 <UART_WaitOnFlagUntilTimeout>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d021      	beq.n	80032a2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003266:	e853 3f00 	ldrex	r3, [r3]
 800326a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800326c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800326e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003272:	653b      	str	r3, [r7, #80]	@ 0x50
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	461a      	mov	r2, r3
 800327a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800327c:	647b      	str	r3, [r7, #68]	@ 0x44
 800327e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003280:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003282:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003284:	e841 2300 	strex	r3, r2, [r1]
 8003288:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800328a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1e6      	bne.n	800325e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2220      	movs	r2, #32
 8003294:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e062      	b.n	8003368 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d149      	bne.n	8003344 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032b8:	2200      	movs	r2, #0
 80032ba:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f856 	bl	8003370 <UART_WaitOnFlagUntilTimeout>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d03c      	beq.n	8003344 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d2:	e853 3f00 	ldrex	r3, [r3]
 80032d6:	623b      	str	r3, [r7, #32]
   return(result);
 80032d8:	6a3b      	ldr	r3, [r7, #32]
 80032da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	461a      	mov	r2, r3
 80032e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80032ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032f0:	e841 2300 	strex	r3, r2, [r1]
 80032f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80032f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1e6      	bne.n	80032ca <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	3308      	adds	r3, #8
 8003302:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	e853 3f00 	ldrex	r3, [r3]
 800330a:	60fb      	str	r3, [r7, #12]
   return(result);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f023 0301 	bic.w	r3, r3, #1
 8003312:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	3308      	adds	r3, #8
 800331a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800331c:	61fa      	str	r2, [r7, #28]
 800331e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003320:	69b9      	ldr	r1, [r7, #24]
 8003322:	69fa      	ldr	r2, [r7, #28]
 8003324:	e841 2300 	strex	r3, r2, [r1]
 8003328:	617b      	str	r3, [r7, #20]
   return(result);
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1e5      	bne.n	80032fc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2220      	movs	r2, #32
 8003334:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e011      	b.n	8003368 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2220      	movs	r2, #32
 8003348:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2220      	movs	r2, #32
 800334e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3758      	adds	r7, #88	@ 0x58
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	603b      	str	r3, [r7, #0]
 800337c:	4613      	mov	r3, r2
 800337e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003380:	e04f      	b.n	8003422 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003388:	d04b      	beq.n	8003422 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800338a:	f7fd fbdb 	bl	8000b44 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	429a      	cmp	r2, r3
 8003398:	d302      	bcc.n	80033a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e04e      	b.n	8003442 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0304 	and.w	r3, r3, #4
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d037      	beq.n	8003422 <UART_WaitOnFlagUntilTimeout+0xb2>
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2b80      	cmp	r3, #128	@ 0x80
 80033b6:	d034      	beq.n	8003422 <UART_WaitOnFlagUntilTimeout+0xb2>
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2b40      	cmp	r3, #64	@ 0x40
 80033bc:	d031      	beq.n	8003422 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	d110      	bne.n	80033ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2208      	movs	r2, #8
 80033d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 f8ff 	bl	80035d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2208      	movs	r2, #8
 80033de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e029      	b.n	8003442 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033fc:	d111      	bne.n	8003422 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003406:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 f8e5 	bl	80035d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2220      	movs	r2, #32
 8003412:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e00f      	b.n	8003442 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	69da      	ldr	r2, [r3, #28]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	4013      	ands	r3, r2
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	429a      	cmp	r2, r3
 8003430:	bf0c      	ite	eq
 8003432:	2301      	moveq	r3, #1
 8003434:	2300      	movne	r3, #0
 8003436:	b2db      	uxtb	r3, r3
 8003438:	461a      	mov	r2, r3
 800343a:	79fb      	ldrb	r3, [r7, #7]
 800343c:	429a      	cmp	r2, r3
 800343e:	d0a0      	beq.n	8003382 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
	...

0800344c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800344c:	b480      	push	{r7}
 800344e:	b097      	sub	sp, #92	@ 0x5c
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	4613      	mov	r3, r2
 8003458:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	88fa      	ldrh	r2, [r7, #6]
 8003464:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	88fa      	ldrh	r2, [r7, #6]
 800346c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800347e:	d10e      	bne.n	800349e <UART_Start_Receive_IT+0x52>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d105      	bne.n	8003494 <UART_Start_Receive_IT+0x48>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800348e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003492:	e02d      	b.n	80034f0 <UART_Start_Receive_IT+0xa4>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	22ff      	movs	r2, #255	@ 0xff
 8003498:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800349c:	e028      	b.n	80034f0 <UART_Start_Receive_IT+0xa4>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10d      	bne.n	80034c2 <UART_Start_Receive_IT+0x76>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d104      	bne.n	80034b8 <UART_Start_Receive_IT+0x6c>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	22ff      	movs	r2, #255	@ 0xff
 80034b2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80034b6:	e01b      	b.n	80034f0 <UART_Start_Receive_IT+0xa4>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	227f      	movs	r2, #127	@ 0x7f
 80034bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80034c0:	e016      	b.n	80034f0 <UART_Start_Receive_IT+0xa4>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034ca:	d10d      	bne.n	80034e8 <UART_Start_Receive_IT+0x9c>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d104      	bne.n	80034de <UART_Start_Receive_IT+0x92>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	227f      	movs	r2, #127	@ 0x7f
 80034d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80034dc:	e008      	b.n	80034f0 <UART_Start_Receive_IT+0xa4>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	223f      	movs	r2, #63	@ 0x3f
 80034e2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80034e6:	e003      	b.n	80034f0 <UART_Start_Receive_IT+0xa4>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2222      	movs	r2, #34	@ 0x22
 80034fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	3308      	adds	r3, #8
 8003506:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800350a:	e853 3f00 	ldrex	r3, [r3]
 800350e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003512:	f043 0301 	orr.w	r3, r3, #1
 8003516:	657b      	str	r3, [r7, #84]	@ 0x54
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	3308      	adds	r3, #8
 800351e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003520:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003522:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003524:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003526:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003528:	e841 2300 	strex	r3, r2, [r1]
 800352c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800352e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1e5      	bne.n	8003500 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800353c:	d107      	bne.n	800354e <UART_Start_Receive_IT+0x102>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d103      	bne.n	800354e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4a21      	ldr	r2, [pc, #132]	@ (80035d0 <UART_Start_Receive_IT+0x184>)
 800354a:	669a      	str	r2, [r3, #104]	@ 0x68
 800354c:	e002      	b.n	8003554 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	4a20      	ldr	r2, [pc, #128]	@ (80035d4 <UART_Start_Receive_IT+0x188>)
 8003552:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d019      	beq.n	8003590 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003564:	e853 3f00 	ldrex	r3, [r3]
 8003568:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800356a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003570:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800357a:	637b      	str	r3, [r7, #52]	@ 0x34
 800357c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003580:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003582:	e841 2300 	strex	r3, r2, [r1]
 8003586:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1e6      	bne.n	800355c <UART_Start_Receive_IT+0x110>
 800358e:	e018      	b.n	80035c2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	e853 3f00 	ldrex	r3, [r3]
 800359c:	613b      	str	r3, [r7, #16]
   return(result);
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f043 0320 	orr.w	r3, r3, #32
 80035a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	461a      	mov	r2, r3
 80035ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035ae:	623b      	str	r3, [r7, #32]
 80035b0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b2:	69f9      	ldr	r1, [r7, #28]
 80035b4:	6a3a      	ldr	r2, [r7, #32]
 80035b6:	e841 2300 	strex	r3, r2, [r1]
 80035ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1e6      	bne.n	8003590 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	375c      	adds	r7, #92	@ 0x5c
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	080038c1 	.word	0x080038c1
 80035d4:	08003719 	.word	0x08003719

080035d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035d8:	b480      	push	{r7}
 80035da:	b095      	sub	sp, #84	@ 0x54
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035e8:	e853 3f00 	ldrex	r3, [r3]
 80035ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	461a      	mov	r2, r3
 80035fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8003600:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003602:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003604:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003606:	e841 2300 	strex	r3, r2, [r1]
 800360a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800360c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1e6      	bne.n	80035e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	3308      	adds	r3, #8
 8003618:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	e853 3f00 	ldrex	r3, [r3]
 8003620:	61fb      	str	r3, [r7, #28]
   return(result);
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	f023 0301 	bic.w	r3, r3, #1
 8003628:	64bb      	str	r3, [r7, #72]	@ 0x48
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	3308      	adds	r3, #8
 8003630:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003632:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003634:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003636:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003638:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800363a:	e841 2300 	strex	r3, r2, [r1]
 800363e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1e5      	bne.n	8003612 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800364a:	2b01      	cmp	r3, #1
 800364c:	d118      	bne.n	8003680 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	e853 3f00 	ldrex	r3, [r3]
 800365a:	60bb      	str	r3, [r7, #8]
   return(result);
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f023 0310 	bic.w	r3, r3, #16
 8003662:	647b      	str	r3, [r7, #68]	@ 0x44
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	461a      	mov	r2, r3
 800366a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800366c:	61bb      	str	r3, [r7, #24]
 800366e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003670:	6979      	ldr	r1, [r7, #20]
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	e841 2300 	strex	r3, r2, [r1]
 8003678:	613b      	str	r3, [r7, #16]
   return(result);
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e6      	bne.n	800364e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2220      	movs	r2, #32
 8003684:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003694:	bf00      	nop
 8003696:	3754      	adds	r7, #84	@ 0x54
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f7ff fa8c 	bl	8002bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036bc:	bf00      	nop
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b088      	sub	sp, #32
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	e853 3f00 	ldrex	r3, [r3]
 80036d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036e0:	61fb      	str	r3, [r7, #28]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	461a      	mov	r2, r3
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	61bb      	str	r3, [r7, #24]
 80036ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ee:	6979      	ldr	r1, [r7, #20]
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	e841 2300 	strex	r3, r2, [r1]
 80036f6:	613b      	str	r3, [r7, #16]
   return(result);
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1e6      	bne.n	80036cc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2220      	movs	r2, #32
 8003702:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff fa58 	bl	8002bc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003710:	bf00      	nop
 8003712:	3720      	adds	r7, #32
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b09c      	sub	sp, #112	@ 0x70
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003726:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003730:	2b22      	cmp	r3, #34	@ 0x22
 8003732:	f040 80b9 	bne.w	80038a8 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003740:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003744:	b2d9      	uxtb	r1, r3
 8003746:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800374a:	b2da      	uxtb	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003750:	400a      	ands	r2, r1
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003766:	b29b      	uxth	r3, r3
 8003768:	3b01      	subs	r3, #1
 800376a:	b29a      	uxth	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003778:	b29b      	uxth	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	f040 809c 	bne.w	80038b8 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003786:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003788:	e853 3f00 	ldrex	r3, [r3]
 800378c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800378e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003790:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003794:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800379e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80037a0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80037a6:	e841 2300 	strex	r3, r2, [r1]
 80037aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80037ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1e6      	bne.n	8003780 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	3308      	adds	r3, #8
 80037b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037bc:	e853 3f00 	ldrex	r3, [r3]
 80037c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80037c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037c4:	f023 0301 	bic.w	r3, r3, #1
 80037c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	3308      	adds	r3, #8
 80037d0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80037d2:	647a      	str	r2, [r7, #68]	@ 0x44
 80037d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037da:	e841 2300 	strex	r3, r2, [r1]
 80037de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80037e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1e5      	bne.n	80037b2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2220      	movs	r2, #32
 80037ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d018      	beq.n	800383a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003810:	e853 3f00 	ldrex	r3, [r3]
 8003814:	623b      	str	r3, [r7, #32]
   return(result);
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800381c:	663b      	str	r3, [r7, #96]	@ 0x60
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	461a      	mov	r2, r3
 8003824:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003826:	633b      	str	r3, [r7, #48]	@ 0x30
 8003828:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800382c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800382e:	e841 2300 	strex	r3, r2, [r1]
 8003832:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1e6      	bne.n	8003808 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800383e:	2b01      	cmp	r3, #1
 8003840:	d12e      	bne.n	80038a0 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	e853 3f00 	ldrex	r3, [r3]
 8003854:	60fb      	str	r3, [r7, #12]
   return(result);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f023 0310 	bic.w	r3, r3, #16
 800385c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003866:	61fb      	str	r3, [r7, #28]
 8003868:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386a:	69b9      	ldr	r1, [r7, #24]
 800386c:	69fa      	ldr	r2, [r7, #28]
 800386e:	e841 2300 	strex	r3, r2, [r1]
 8003872:	617b      	str	r3, [r7, #20]
   return(result);
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1e6      	bne.n	8003848 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	f003 0310 	and.w	r3, r3, #16
 8003884:	2b10      	cmp	r3, #16
 8003886:	d103      	bne.n	8003890 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2210      	movs	r2, #16
 800388e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003896:	4619      	mov	r1, r3
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff f9a5 	bl	8002be8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800389e:	e00b      	b.n	80038b8 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7fc fee3 	bl	800066c <HAL_UART_RxCpltCallback>
}
 80038a6:	e007      	b.n	80038b8 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699a      	ldr	r2, [r3, #24]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0208 	orr.w	r2, r2, #8
 80038b6:	619a      	str	r2, [r3, #24]
}
 80038b8:	bf00      	nop
 80038ba:	3770      	adds	r7, #112	@ 0x70
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b09c      	sub	sp, #112	@ 0x70
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80038ce:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038d8:	2b22      	cmp	r3, #34	@ 0x22
 80038da:	f040 80b9 	bne.w	8003a50 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ec:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80038ee:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80038f2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80038f6:	4013      	ands	r3, r2
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038fc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003902:	1c9a      	adds	r2, r3, #2
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800390e:	b29b      	uxth	r3, r3
 8003910:	3b01      	subs	r3, #1
 8003912:	b29a      	uxth	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003920:	b29b      	uxth	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	f040 809c 	bne.w	8003a60 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003930:	e853 3f00 	ldrex	r3, [r3]
 8003934:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003936:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003938:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800393c:	667b      	str	r3, [r7, #100]	@ 0x64
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	461a      	mov	r2, r3
 8003944:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003946:	657b      	str	r3, [r7, #84]	@ 0x54
 8003948:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800394c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800394e:	e841 2300 	strex	r3, r2, [r1]
 8003952:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003954:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1e6      	bne.n	8003928 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	3308      	adds	r3, #8
 8003960:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003964:	e853 3f00 	ldrex	r3, [r3]
 8003968:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800396a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800396c:	f023 0301 	bic.w	r3, r3, #1
 8003970:	663b      	str	r3, [r7, #96]	@ 0x60
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	3308      	adds	r3, #8
 8003978:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800397a:	643a      	str	r2, [r7, #64]	@ 0x40
 800397c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003980:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003982:	e841 2300 	strex	r3, r2, [r1]
 8003986:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1e5      	bne.n	800395a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2220      	movs	r2, #32
 8003992:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d018      	beq.n	80039e2 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	e853 3f00 	ldrex	r3, [r3]
 80039bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80039c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039d0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039d6:	e841 2300 	strex	r3, r2, [r1]
 80039da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80039dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1e6      	bne.n	80039b0 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d12e      	bne.n	8003a48 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	e853 3f00 	ldrex	r3, [r3]
 80039fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	f023 0310 	bic.w	r3, r3, #16
 8003a04:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a0e:	61bb      	str	r3, [r7, #24]
 8003a10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a12:	6979      	ldr	r1, [r7, #20]
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	e841 2300 	strex	r3, r2, [r1]
 8003a1a:	613b      	str	r3, [r7, #16]
   return(result);
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1e6      	bne.n	80039f0 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	f003 0310 	and.w	r3, r3, #16
 8003a2c:	2b10      	cmp	r3, #16
 8003a2e:	d103      	bne.n	8003a38 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2210      	movs	r2, #16
 8003a36:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003a3e:	4619      	mov	r1, r3
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff f8d1 	bl	8002be8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003a46:	e00b      	b.n	8003a60 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7fc fe0f 	bl	800066c <HAL_UART_RxCpltCallback>
}
 8003a4e:	e007      	b.n	8003a60 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699a      	ldr	r2, [r3, #24]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0208 	orr.w	r2, r2, #8
 8003a5e:	619a      	str	r2, [r3, #24]
}
 8003a60:	bf00      	nop
 8003a62:	3770      	adds	r7, #112	@ 0x70
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <memset>:
 8003a68:	4402      	add	r2, r0
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d100      	bne.n	8003a72 <memset+0xa>
 8003a70:	4770      	bx	lr
 8003a72:	f803 1b01 	strb.w	r1, [r3], #1
 8003a76:	e7f9      	b.n	8003a6c <memset+0x4>

08003a78 <strncmp>:
 8003a78:	b510      	push	{r4, lr}
 8003a7a:	b16a      	cbz	r2, 8003a98 <strncmp+0x20>
 8003a7c:	3901      	subs	r1, #1
 8003a7e:	1884      	adds	r4, r0, r2
 8003a80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a84:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d103      	bne.n	8003a94 <strncmp+0x1c>
 8003a8c:	42a0      	cmp	r0, r4
 8003a8e:	d001      	beq.n	8003a94 <strncmp+0x1c>
 8003a90:	2a00      	cmp	r2, #0
 8003a92:	d1f5      	bne.n	8003a80 <strncmp+0x8>
 8003a94:	1ad0      	subs	r0, r2, r3
 8003a96:	bd10      	pop	{r4, pc}
 8003a98:	4610      	mov	r0, r2
 8003a9a:	e7fc      	b.n	8003a96 <strncmp+0x1e>

08003a9c <__libc_init_array>:
 8003a9c:	b570      	push	{r4, r5, r6, lr}
 8003a9e:	4d0d      	ldr	r5, [pc, #52]	@ (8003ad4 <__libc_init_array+0x38>)
 8003aa0:	4c0d      	ldr	r4, [pc, #52]	@ (8003ad8 <__libc_init_array+0x3c>)
 8003aa2:	1b64      	subs	r4, r4, r5
 8003aa4:	10a4      	asrs	r4, r4, #2
 8003aa6:	2600      	movs	r6, #0
 8003aa8:	42a6      	cmp	r6, r4
 8003aaa:	d109      	bne.n	8003ac0 <__libc_init_array+0x24>
 8003aac:	4d0b      	ldr	r5, [pc, #44]	@ (8003adc <__libc_init_array+0x40>)
 8003aae:	4c0c      	ldr	r4, [pc, #48]	@ (8003ae0 <__libc_init_array+0x44>)
 8003ab0:	f000 f818 	bl	8003ae4 <_init>
 8003ab4:	1b64      	subs	r4, r4, r5
 8003ab6:	10a4      	asrs	r4, r4, #2
 8003ab8:	2600      	movs	r6, #0
 8003aba:	42a6      	cmp	r6, r4
 8003abc:	d105      	bne.n	8003aca <__libc_init_array+0x2e>
 8003abe:	bd70      	pop	{r4, r5, r6, pc}
 8003ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ac4:	4798      	blx	r3
 8003ac6:	3601      	adds	r6, #1
 8003ac8:	e7ee      	b.n	8003aa8 <__libc_init_array+0xc>
 8003aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ace:	4798      	blx	r3
 8003ad0:	3601      	adds	r6, #1
 8003ad2:	e7f2      	b.n	8003aba <__libc_init_array+0x1e>
 8003ad4:	08003b94 	.word	0x08003b94
 8003ad8:	08003b94 	.word	0x08003b94
 8003adc:	08003b94 	.word	0x08003b94
 8003ae0:	08003b98 	.word	0x08003b98

08003ae4 <_init>:
 8003ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ae6:	bf00      	nop
 8003ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aea:	bc08      	pop	{r3}
 8003aec:	469e      	mov	lr, r3
 8003aee:	4770      	bx	lr

08003af0 <_fini>:
 8003af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af2:	bf00      	nop
 8003af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003af6:	bc08      	pop	{r3}
 8003af8:	469e      	mov	lr, r3
 8003afa:	4770      	bx	lr
